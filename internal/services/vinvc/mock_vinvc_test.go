// Code generated by MockGen. DO NOT EDIT.
// Source: vinvc.go
//
// Generated by this command:
//
//	mockgen -destination=./mock_vinvc_test.go -package=vinvc_test -source=vinvc.go
//

// Package vinvc_test is a generated GoMock package.
package vinvc_test

import (
	context "context"
	json "encoding/json"
	reflect "reflect"

	cloudevent "github.com/DIMO-Network/cloudevent"
	grpc "github.com/DIMO-Network/fetch-api/pkg/grpc"
	gomock "go.uber.org/mock/gomock"
)

// MockFetchAPIService is a mock of FetchAPIService interface.
type MockFetchAPIService struct {
	ctrl     *gomock.Controller
	recorder *MockFetchAPIServiceMockRecorder
	isgomock struct{}
}

// MockFetchAPIServiceMockRecorder is the mock recorder for MockFetchAPIService.
type MockFetchAPIServiceMockRecorder struct {
	mock *MockFetchAPIService
}

// NewMockFetchAPIService creates a new mock instance.
func NewMockFetchAPIService(ctrl *gomock.Controller) *MockFetchAPIService {
	mock := &MockFetchAPIService{ctrl: ctrl}
	mock.recorder = &MockFetchAPIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetchAPIService) EXPECT() *MockFetchAPIServiceMockRecorder {
	return m.recorder
}

// ListCloudEvents mocks base method.
func (m *MockFetchAPIService) ListCloudEvents(ctx context.Context, filter *grpc.SearchOptions, limit int32) ([]cloudevent.CloudEvent[json.RawMessage], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCloudEvents", ctx, filter, limit)
	ret0, _ := ret[0].([]cloudevent.CloudEvent[json.RawMessage])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCloudEvents indicates an expected call of ListCloudEvents.
func (mr *MockFetchAPIServiceMockRecorder) ListCloudEvents(ctx, filter, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudEvents", reflect.TypeOf((*MockFetchAPIService)(nil).ListCloudEvents), ctx, filter, limit)
}
