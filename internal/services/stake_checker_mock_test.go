// Code generated by MockGen. DO NOT EDIT.
// Source: ./rewards.go
//
// Generated by this command:
//
//	mockgen -source=./rewards.go -destination=stake_checker_mock_test.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"
	time "time"

	grpc "github.com/DIMO-Network/device-definitions-api/pkg/grpc"
	grpc0 "github.com/DIMO-Network/devices-api/pkg/grpc"
	ch "github.com/DIMO-Network/rewards-api/internal/services/ch"
	gomock "go.uber.org/mock/gomock"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockStakeChecker is a mock of StakeChecker interface.
type MockStakeChecker struct {
	ctrl     *gomock.Controller
	recorder *MockStakeCheckerMockRecorder
	isgomock struct{}
}

// MockStakeCheckerMockRecorder is the mock recorder for MockStakeChecker.
type MockStakeCheckerMockRecorder struct {
	mock *MockStakeChecker
}

// NewMockStakeChecker creates a new mock instance.
func NewMockStakeChecker(ctrl *gomock.Controller) *MockStakeChecker {
	mock := &MockStakeChecker{ctrl: ctrl}
	mock.recorder = &MockStakeCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStakeChecker) EXPECT() *MockStakeCheckerMockRecorder {
	return m.recorder
}

// GetVehicleStakePoints mocks base method.
func (m *MockStakeChecker) GetVehicleStakePoints(vehicleID uint64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicleStakePoints", vehicleID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicleStakePoints indicates an expected call of GetVehicleStakePoints.
func (mr *MockStakeCheckerMockRecorder) GetVehicleStakePoints(vehicleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicleStakePoints", reflect.TypeOf((*MockStakeChecker)(nil).GetVehicleStakePoints), vehicleID)
}

// MockDeviceActivityClient is a mock of DeviceActivityClient interface.
type MockDeviceActivityClient struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceActivityClientMockRecorder
	isgomock struct{}
}

// MockDeviceActivityClientMockRecorder is the mock recorder for MockDeviceActivityClient.
type MockDeviceActivityClientMockRecorder struct {
	mock *MockDeviceActivityClient
}

// NewMockDeviceActivityClient creates a new mock instance.
func NewMockDeviceActivityClient(ctrl *gomock.Controller) *MockDeviceActivityClient {
	mock := &MockDeviceActivityClient{ctrl: ctrl}
	mock.recorder = &MockDeviceActivityClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceActivityClient) EXPECT() *MockDeviceActivityClientMockRecorder {
	return m.recorder
}

// DescribeActiveDevices mocks base method.
func (m *MockDeviceActivityClient) DescribeActiveDevices(ctx context.Context, start, end time.Time) ([]*ch.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeActiveDevices", ctx, start, end)
	ret0, _ := ret[0].([]*ch.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeActiveDevices indicates an expected call of DescribeActiveDevices.
func (mr *MockDeviceActivityClientMockRecorder) DescribeActiveDevices(ctx, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeActiveDevices", reflect.TypeOf((*MockDeviceActivityClient)(nil).DescribeActiveDevices), ctx, start, end)
}

// MockIntegrationsGetter is a mock of IntegrationsGetter interface.
type MockIntegrationsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockIntegrationsGetterMockRecorder
	isgomock struct{}
}

// MockIntegrationsGetterMockRecorder is the mock recorder for MockIntegrationsGetter.
type MockIntegrationsGetterMockRecorder struct {
	mock *MockIntegrationsGetter
}

// NewMockIntegrationsGetter creates a new mock instance.
func NewMockIntegrationsGetter(ctrl *gomock.Controller) *MockIntegrationsGetter {
	mock := &MockIntegrationsGetter{ctrl: ctrl}
	mock.recorder = &MockIntegrationsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntegrationsGetter) EXPECT() *MockIntegrationsGetterMockRecorder {
	return m.recorder
}

// GetIntegrations mocks base method.
func (m *MockIntegrationsGetter) GetIntegrations(ctx context.Context, in *emptypb.Empty, opts ...grpc1.CallOption) (*grpc.GetIntegrationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIntegrations", varargs...)
	ret0, _ := ret[0].(*grpc.GetIntegrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegrations indicates an expected call of GetIntegrations.
func (mr *MockIntegrationsGetterMockRecorder) GetIntegrations(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrations", reflect.TypeOf((*MockIntegrationsGetter)(nil).GetIntegrations), varargs...)
}

// MockDevicesClient is a mock of DevicesClient interface.
type MockDevicesClient struct {
	ctrl     *gomock.Controller
	recorder *MockDevicesClientMockRecorder
	isgomock struct{}
}

// MockDevicesClientMockRecorder is the mock recorder for MockDevicesClient.
type MockDevicesClientMockRecorder struct {
	mock *MockDevicesClient
}

// NewMockDevicesClient creates a new mock instance.
func NewMockDevicesClient(ctrl *gomock.Controller) *MockDevicesClient {
	mock := &MockDevicesClient{ctrl: ctrl}
	mock.recorder = &MockDevicesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevicesClient) EXPECT() *MockDevicesClientMockRecorder {
	return m.recorder
}

// GetUserDeviceByTokenId mocks base method.
func (m *MockDevicesClient) GetUserDeviceByTokenId(ctx context.Context, in *grpc0.GetUserDeviceByTokenIdRequest, opts ...grpc1.CallOption) (*grpc0.UserDevice, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserDeviceByTokenId", varargs...)
	ret0, _ := ret[0].(*grpc0.UserDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDeviceByTokenId indicates an expected call of GetUserDeviceByTokenId.
func (mr *MockDevicesClientMockRecorder) GetUserDeviceByTokenId(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDeviceByTokenId", reflect.TypeOf((*MockDevicesClient)(nil).GetUserDeviceByTokenId), varargs...)
}
