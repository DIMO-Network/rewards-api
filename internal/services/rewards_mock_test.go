// Code generated by MockGen. DO NOT EDIT.
// Source: ./rewards.go
//
// Generated by this command:
//
//	mockgen -source=./rewards.go -destination=rewards_mock_test.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"
	time "time"

	grpc "github.com/DIMO-Network/devices-api/pkg/grpc"
	ch "github.com/DIMO-Network/rewards-api/internal/services/ch"
	identity "github.com/DIMO-Network/rewards-api/internal/services/identity"
	grpc0 "github.com/DIMO-Network/tesla-oracle/pkg/grpc"
	gomock "go.uber.org/mock/gomock"
	grpc1 "google.golang.org/grpc"
)

// MockIdentityClient is a mock of IdentityClient interface.
type MockIdentityClient struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityClientMockRecorder
	isgomock struct{}
}

// MockIdentityClientMockRecorder is the mock recorder for MockIdentityClient.
type MockIdentityClientMockRecorder struct {
	mock *MockIdentityClient
}

// NewMockIdentityClient creates a new mock instance.
func NewMockIdentityClient(ctrl *gomock.Controller) *MockIdentityClient {
	mock := &MockIdentityClient{ctrl: ctrl}
	mock.recorder = &MockIdentityClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityClient) EXPECT() *MockIdentityClientMockRecorder {
	return m.recorder
}

// DescribeVehicle mocks base method.
func (m *MockIdentityClient) DescribeVehicle(vehicleID uint64) (*identity.VehicleDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVehicle", vehicleID)
	ret0, _ := ret[0].(*identity.VehicleDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVehicle indicates an expected call of DescribeVehicle.
func (mr *MockIdentityClientMockRecorder) DescribeVehicle(vehicleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVehicle", reflect.TypeOf((*MockIdentityClient)(nil).DescribeVehicle), vehicleID)
}

// MockDeviceActivityClient is a mock of DeviceActivityClient interface.
type MockDeviceActivityClient struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceActivityClientMockRecorder
	isgomock struct{}
}

// MockDeviceActivityClientMockRecorder is the mock recorder for MockDeviceActivityClient.
type MockDeviceActivityClientMockRecorder struct {
	mock *MockDeviceActivityClient
}

// NewMockDeviceActivityClient creates a new mock instance.
func NewMockDeviceActivityClient(ctrl *gomock.Controller) *MockDeviceActivityClient {
	mock := &MockDeviceActivityClient{ctrl: ctrl}
	mock.recorder = &MockDeviceActivityClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceActivityClient) EXPECT() *MockDeviceActivityClientMockRecorder {
	return m.recorder
}

// DescribeActiveDevices mocks base method.
func (m *MockDeviceActivityClient) DescribeActiveDevices(ctx context.Context, start, end time.Time) ([]*ch.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeActiveDevices", ctx, start, end)
	ret0, _ := ret[0].([]*ch.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeActiveDevices indicates an expected call of DescribeActiveDevices.
func (mr *MockDeviceActivityClientMockRecorder) DescribeActiveDevices(ctx, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeActiveDevices", reflect.TypeOf((*MockDeviceActivityClient)(nil).DescribeActiveDevices), ctx, start, end)
}

// MockDevicesClient is a mock of DevicesClient interface.
type MockDevicesClient struct {
	ctrl     *gomock.Controller
	recorder *MockDevicesClientMockRecorder
	isgomock struct{}
}

// MockDevicesClientMockRecorder is the mock recorder for MockDevicesClient.
type MockDevicesClientMockRecorder struct {
	mock *MockDevicesClient
}

// NewMockDevicesClient creates a new mock instance.
func NewMockDevicesClient(ctrl *gomock.Controller) *MockDevicesClient {
	mock := &MockDevicesClient{ctrl: ctrl}
	mock.recorder = &MockDevicesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevicesClient) EXPECT() *MockDevicesClientMockRecorder {
	return m.recorder
}

// GetVehicleByTokenIdFast mocks base method.
func (m *MockDevicesClient) GetVehicleByTokenIdFast(ctx context.Context, in *grpc.GetVehicleByTokenIdFastRequest, opts ...grpc1.CallOption) (*grpc.GetVehicleByTokenIdFastResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVehicleByTokenIdFast", varargs...)
	ret0, _ := ret[0].(*grpc.GetVehicleByTokenIdFastResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicleByTokenIdFast indicates an expected call of GetVehicleByTokenIdFast.
func (mr *MockDevicesClientMockRecorder) GetVehicleByTokenIdFast(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicleByTokenIdFast", reflect.TypeOf((*MockDevicesClient)(nil).GetVehicleByTokenIdFast), varargs...)
}

// MockTeslaClient is a mock of TeslaClient interface.
type MockTeslaClient struct {
	ctrl     *gomock.Controller
	recorder *MockTeslaClientMockRecorder
	isgomock struct{}
}

// MockTeslaClientMockRecorder is the mock recorder for MockTeslaClient.
type MockTeslaClientMockRecorder struct {
	mock *MockTeslaClient
}

// NewMockTeslaClient creates a new mock instance.
func NewMockTeslaClient(ctrl *gomock.Controller) *MockTeslaClient {
	mock := &MockTeslaClient{ctrl: ctrl}
	mock.recorder = &MockTeslaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeslaClient) EXPECT() *MockTeslaClientMockRecorder {
	return m.recorder
}

// GetVinByTokenId mocks base method.
func (m *MockTeslaClient) GetVinByTokenId(ctx context.Context, in *grpc0.GetVinByTokenIdRequest, opts ...grpc1.CallOption) (*grpc0.GetVinByTokenIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVinByTokenId", varargs...)
	ret0, _ := ret[0].(*grpc0.GetVinByTokenIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVinByTokenId indicates an expected call of GetVinByTokenId.
func (mr *MockTeslaClientMockRecorder) GetVinByTokenId(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVinByTokenId", reflect.TypeOf((*MockTeslaClient)(nil).GetVinByTokenId), varargs...)
}
