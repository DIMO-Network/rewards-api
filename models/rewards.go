// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Reward is an object representing the database table.
type Reward struct {
	IssuanceWeekID                   int               `boil:"issuance_week_id" json:"issuance_week_id" toml:"issuance_week_id" yaml:"issuance_week_id"`
	UserDeviceID                     string            `boil:"user_device_id" json:"user_device_id" toml:"user_device_id" yaml:"user_device_id"`
	UserID                           string            `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ConnectionStreak                 int               `boil:"connection_streak" json:"connection_streak" toml:"connection_streak" yaml:"connection_streak"`
	DisconnectionStreak              int               `boil:"disconnection_streak" json:"disconnection_streak" toml:"disconnection_streak" yaml:"disconnection_streak"`
	StreakPoints                     int               `boil:"streak_points" json:"streak_points" toml:"streak_points" yaml:"streak_points"`
	IntegrationIds                   types.StringArray `boil:"integration_ids" json:"integration_ids" toml:"integration_ids" yaml:"integration_ids"`
	IntegrationPoints                int               `boil:"integration_points" json:"integration_points" toml:"integration_points" yaml:"integration_points"`
	CreatedAt                        time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                        time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Tokens                           types.NullDecimal `boil:"tokens" json:"tokens,omitempty" toml:"tokens" yaml:"tokens,omitempty"`
	UserEthereumAddress              null.String       `boil:"user_ethereum_address" json:"user_ethereum_address,omitempty" toml:"user_ethereum_address" yaml:"user_ethereum_address,omitempty"`
	UserDeviceTokenID                types.NullDecimal `boil:"user_device_token_id" json:"user_device_token_id,omitempty" toml:"user_device_token_id" yaml:"user_device_token_id,omitempty"`
	TransferMetaTransactionRequestID null.String       `boil:"transfer_meta_transaction_request_id" json:"transfer_meta_transaction_request_id,omitempty" toml:"transfer_meta_transaction_request_id" yaml:"transfer_meta_transaction_request_id,omitempty"`
	TransferSuccessful               null.Bool         `boil:"transfer_successful" json:"transfer_successful,omitempty" toml:"transfer_successful" yaml:"transfer_successful,omitempty"`
	TransferFailureReason            null.String       `boil:"transfer_failure_reason" json:"transfer_failure_reason,omitempty" toml:"transfer_failure_reason" yaml:"transfer_failure_reason,omitempty"`
	AftermarketTokenID               types.NullDecimal `boil:"aftermarket_token_id" json:"aftermarket_token_id,omitempty" toml:"aftermarket_token_id" yaml:"aftermarket_token_id,omitempty"`
	RewardsReceiverEthereumAddress   null.String       `boil:"rewards_receiver_ethereum_address" json:"rewards_receiver_ethereum_address,omitempty" toml:"rewards_receiver_ethereum_address" yaml:"rewards_receiver_ethereum_address,omitempty"`
	SyntheticDeviceID                null.Int          `boil:"synthetic_device_id" json:"synthetic_device_id,omitempty" toml:"synthetic_device_id" yaml:"synthetic_device_id,omitempty"`
	AftermarketDevicePoints          int               `boil:"aftermarket_device_points" json:"aftermarket_device_points" toml:"aftermarket_device_points" yaml:"aftermarket_device_points"`
	SyntheticDevicePoints            int               `boil:"synthetic_device_points" json:"synthetic_device_points" toml:"synthetic_device_points" yaml:"synthetic_device_points"`
	AftermarketDeviceTokens          types.NullDecimal `boil:"aftermarket_device_tokens" json:"aftermarket_device_tokens,omitempty" toml:"aftermarket_device_tokens" yaml:"aftermarket_device_tokens,omitempty"`
	SyntheticDeviceTokens            types.NullDecimal `boil:"synthetic_device_tokens" json:"synthetic_device_tokens,omitempty" toml:"synthetic_device_tokens" yaml:"synthetic_device_tokens,omitempty"`
	StreakTokens                     types.NullDecimal `boil:"streak_tokens" json:"streak_tokens,omitempty" toml:"streak_tokens" yaml:"streak_tokens,omitempty"`

	R *rewardR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rewardL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RewardColumns = struct {
	IssuanceWeekID                   string
	UserDeviceID                     string
	UserID                           string
	ConnectionStreak                 string
	DisconnectionStreak              string
	StreakPoints                     string
	IntegrationIds                   string
	IntegrationPoints                string
	CreatedAt                        string
	UpdatedAt                        string
	Tokens                           string
	UserEthereumAddress              string
	UserDeviceTokenID                string
	TransferMetaTransactionRequestID string
	TransferSuccessful               string
	TransferFailureReason            string
	AftermarketTokenID               string
	RewardsReceiverEthereumAddress   string
	SyntheticDeviceID                string
	AftermarketDevicePoints          string
	SyntheticDevicePoints            string
	AftermarketDeviceTokens          string
	SyntheticDeviceTokens            string
	StreakTokens                     string
}{
	IssuanceWeekID:                   "issuance_week_id",
	UserDeviceID:                     "user_device_id",
	UserID:                           "user_id",
	ConnectionStreak:                 "connection_streak",
	DisconnectionStreak:              "disconnection_streak",
	StreakPoints:                     "streak_points",
	IntegrationIds:                   "integration_ids",
	IntegrationPoints:                "integration_points",
	CreatedAt:                        "created_at",
	UpdatedAt:                        "updated_at",
	Tokens:                           "tokens",
	UserEthereumAddress:              "user_ethereum_address",
	UserDeviceTokenID:                "user_device_token_id",
	TransferMetaTransactionRequestID: "transfer_meta_transaction_request_id",
	TransferSuccessful:               "transfer_successful",
	TransferFailureReason:            "transfer_failure_reason",
	AftermarketTokenID:               "aftermarket_token_id",
	RewardsReceiverEthereumAddress:   "rewards_receiver_ethereum_address",
	SyntheticDeviceID:                "synthetic_device_id",
	AftermarketDevicePoints:          "aftermarket_device_points",
	SyntheticDevicePoints:            "synthetic_device_points",
	AftermarketDeviceTokens:          "aftermarket_device_tokens",
	SyntheticDeviceTokens:            "synthetic_device_tokens",
	StreakTokens:                     "streak_tokens",
}

var RewardTableColumns = struct {
	IssuanceWeekID                   string
	UserDeviceID                     string
	UserID                           string
	ConnectionStreak                 string
	DisconnectionStreak              string
	StreakPoints                     string
	IntegrationIds                   string
	IntegrationPoints                string
	CreatedAt                        string
	UpdatedAt                        string
	Tokens                           string
	UserEthereumAddress              string
	UserDeviceTokenID                string
	TransferMetaTransactionRequestID string
	TransferSuccessful               string
	TransferFailureReason            string
	AftermarketTokenID               string
	RewardsReceiverEthereumAddress   string
	SyntheticDeviceID                string
	AftermarketDevicePoints          string
	SyntheticDevicePoints            string
	AftermarketDeviceTokens          string
	SyntheticDeviceTokens            string
	StreakTokens                     string
}{
	IssuanceWeekID:                   "rewards.issuance_week_id",
	UserDeviceID:                     "rewards.user_device_id",
	UserID:                           "rewards.user_id",
	ConnectionStreak:                 "rewards.connection_streak",
	DisconnectionStreak:              "rewards.disconnection_streak",
	StreakPoints:                     "rewards.streak_points",
	IntegrationIds:                   "rewards.integration_ids",
	IntegrationPoints:                "rewards.integration_points",
	CreatedAt:                        "rewards.created_at",
	UpdatedAt:                        "rewards.updated_at",
	Tokens:                           "rewards.tokens",
	UserEthereumAddress:              "rewards.user_ethereum_address",
	UserDeviceTokenID:                "rewards.user_device_token_id",
	TransferMetaTransactionRequestID: "rewards.transfer_meta_transaction_request_id",
	TransferSuccessful:               "rewards.transfer_successful",
	TransferFailureReason:            "rewards.transfer_failure_reason",
	AftermarketTokenID:               "rewards.aftermarket_token_id",
	RewardsReceiverEthereumAddress:   "rewards.rewards_receiver_ethereum_address",
	SyntheticDeviceID:                "rewards.synthetic_device_id",
	AftermarketDevicePoints:          "rewards.aftermarket_device_points",
	SyntheticDevicePoints:            "rewards.synthetic_device_points",
	AftermarketDeviceTokens:          "rewards.aftermarket_device_tokens",
	SyntheticDeviceTokens:            "rewards.synthetic_device_tokens",
	StreakTokens:                     "rewards.streak_tokens",
}

// Generated where

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var RewardWhere = struct {
	IssuanceWeekID                   whereHelperint
	UserDeviceID                     whereHelperstring
	UserID                           whereHelperstring
	ConnectionStreak                 whereHelperint
	DisconnectionStreak              whereHelperint
	StreakPoints                     whereHelperint
	IntegrationIds                   whereHelpertypes_StringArray
	IntegrationPoints                whereHelperint
	CreatedAt                        whereHelpertime_Time
	UpdatedAt                        whereHelpertime_Time
	Tokens                           whereHelpertypes_NullDecimal
	UserEthereumAddress              whereHelpernull_String
	UserDeviceTokenID                whereHelpertypes_NullDecimal
	TransferMetaTransactionRequestID whereHelpernull_String
	TransferSuccessful               whereHelpernull_Bool
	TransferFailureReason            whereHelpernull_String
	AftermarketTokenID               whereHelpertypes_NullDecimal
	RewardsReceiverEthereumAddress   whereHelpernull_String
	SyntheticDeviceID                whereHelpernull_Int
	AftermarketDevicePoints          whereHelperint
	SyntheticDevicePoints            whereHelperint
	AftermarketDeviceTokens          whereHelpertypes_NullDecimal
	SyntheticDeviceTokens            whereHelpertypes_NullDecimal
	StreakTokens                     whereHelpertypes_NullDecimal
}{
	IssuanceWeekID:                   whereHelperint{field: "\"rewards_api\".\"rewards\".\"issuance_week_id\""},
	UserDeviceID:                     whereHelperstring{field: "\"rewards_api\".\"rewards\".\"user_device_id\""},
	UserID:                           whereHelperstring{field: "\"rewards_api\".\"rewards\".\"user_id\""},
	ConnectionStreak:                 whereHelperint{field: "\"rewards_api\".\"rewards\".\"connection_streak\""},
	DisconnectionStreak:              whereHelperint{field: "\"rewards_api\".\"rewards\".\"disconnection_streak\""},
	StreakPoints:                     whereHelperint{field: "\"rewards_api\".\"rewards\".\"streak_points\""},
	IntegrationIds:                   whereHelpertypes_StringArray{field: "\"rewards_api\".\"rewards\".\"integration_ids\""},
	IntegrationPoints:                whereHelperint{field: "\"rewards_api\".\"rewards\".\"integration_points\""},
	CreatedAt:                        whereHelpertime_Time{field: "\"rewards_api\".\"rewards\".\"created_at\""},
	UpdatedAt:                        whereHelpertime_Time{field: "\"rewards_api\".\"rewards\".\"updated_at\""},
	Tokens:                           whereHelpertypes_NullDecimal{field: "\"rewards_api\".\"rewards\".\"tokens\""},
	UserEthereumAddress:              whereHelpernull_String{field: "\"rewards_api\".\"rewards\".\"user_ethereum_address\""},
	UserDeviceTokenID:                whereHelpertypes_NullDecimal{field: "\"rewards_api\".\"rewards\".\"user_device_token_id\""},
	TransferMetaTransactionRequestID: whereHelpernull_String{field: "\"rewards_api\".\"rewards\".\"transfer_meta_transaction_request_id\""},
	TransferSuccessful:               whereHelpernull_Bool{field: "\"rewards_api\".\"rewards\".\"transfer_successful\""},
	TransferFailureReason:            whereHelpernull_String{field: "\"rewards_api\".\"rewards\".\"transfer_failure_reason\""},
	AftermarketTokenID:               whereHelpertypes_NullDecimal{field: "\"rewards_api\".\"rewards\".\"aftermarket_token_id\""},
	RewardsReceiverEthereumAddress:   whereHelpernull_String{field: "\"rewards_api\".\"rewards\".\"rewards_receiver_ethereum_address\""},
	SyntheticDeviceID:                whereHelpernull_Int{field: "\"rewards_api\".\"rewards\".\"synthetic_device_id\""},
	AftermarketDevicePoints:          whereHelperint{field: "\"rewards_api\".\"rewards\".\"aftermarket_device_points\""},
	SyntheticDevicePoints:            whereHelperint{field: "\"rewards_api\".\"rewards\".\"synthetic_device_points\""},
	AftermarketDeviceTokens:          whereHelpertypes_NullDecimal{field: "\"rewards_api\".\"rewards\".\"aftermarket_device_tokens\""},
	SyntheticDeviceTokens:            whereHelpertypes_NullDecimal{field: "\"rewards_api\".\"rewards\".\"synthetic_device_tokens\""},
	StreakTokens:                     whereHelpertypes_NullDecimal{field: "\"rewards_api\".\"rewards\".\"streak_tokens\""},
}

// RewardRels is where relationship names are stored.
var RewardRels = struct {
	IssuanceWeek                   string
	TransferMetaTransactionRequest string
}{
	IssuanceWeek:                   "IssuanceWeek",
	TransferMetaTransactionRequest: "TransferMetaTransactionRequest",
}

// rewardR is where relationships are stored.
type rewardR struct {
	IssuanceWeek                   *IssuanceWeek           `boil:"IssuanceWeek" json:"IssuanceWeek" toml:"IssuanceWeek" yaml:"IssuanceWeek"`
	TransferMetaTransactionRequest *MetaTransactionRequest `boil:"TransferMetaTransactionRequest" json:"TransferMetaTransactionRequest" toml:"TransferMetaTransactionRequest" yaml:"TransferMetaTransactionRequest"`
}

// NewStruct creates a new relationship struct
func (*rewardR) NewStruct() *rewardR {
	return &rewardR{}
}

func (r *rewardR) GetIssuanceWeek() *IssuanceWeek {
	if r == nil {
		return nil
	}
	return r.IssuanceWeek
}

func (r *rewardR) GetTransferMetaTransactionRequest() *MetaTransactionRequest {
	if r == nil {
		return nil
	}
	return r.TransferMetaTransactionRequest
}

// rewardL is where Load methods for each relationship are stored.
type rewardL struct{}

var (
	rewardAllColumns            = []string{"issuance_week_id", "user_device_id", "user_id", "connection_streak", "disconnection_streak", "streak_points", "integration_ids", "integration_points", "created_at", "updated_at", "tokens", "user_ethereum_address", "user_device_token_id", "transfer_meta_transaction_request_id", "transfer_successful", "transfer_failure_reason", "aftermarket_token_id", "rewards_receiver_ethereum_address", "synthetic_device_id", "aftermarket_device_points", "synthetic_device_points", "aftermarket_device_tokens", "synthetic_device_tokens", "streak_tokens"}
	rewardColumnsWithoutDefault = []string{"issuance_week_id", "user_device_id", "user_id", "connection_streak", "disconnection_streak", "streak_points", "integration_points"}
	rewardColumnsWithDefault    = []string{"integration_ids", "created_at", "updated_at", "tokens", "user_ethereum_address", "user_device_token_id", "transfer_meta_transaction_request_id", "transfer_successful", "transfer_failure_reason", "aftermarket_token_id", "rewards_receiver_ethereum_address", "synthetic_device_id", "aftermarket_device_points", "synthetic_device_points", "aftermarket_device_tokens", "synthetic_device_tokens", "streak_tokens"}
	rewardPrimaryKeyColumns     = []string{"issuance_week_id", "user_device_id"}
	rewardGeneratedColumns      = []string{}
)

type (
	// RewardSlice is an alias for a slice of pointers to Reward.
	// This should almost always be used instead of []Reward.
	RewardSlice []*Reward
	// RewardHook is the signature for custom Reward hook methods
	RewardHook func(context.Context, boil.ContextExecutor, *Reward) error

	rewardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rewardType                 = reflect.TypeOf(&Reward{})
	rewardMapping              = queries.MakeStructMapping(rewardType)
	rewardPrimaryKeyMapping, _ = queries.BindMapping(rewardType, rewardMapping, rewardPrimaryKeyColumns)
	rewardInsertCacheMut       sync.RWMutex
	rewardInsertCache          = make(map[string]insertCache)
	rewardUpdateCacheMut       sync.RWMutex
	rewardUpdateCache          = make(map[string]updateCache)
	rewardUpsertCacheMut       sync.RWMutex
	rewardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var rewardAfterSelectMu sync.Mutex
var rewardAfterSelectHooks []RewardHook

var rewardBeforeInsertMu sync.Mutex
var rewardBeforeInsertHooks []RewardHook
var rewardAfterInsertMu sync.Mutex
var rewardAfterInsertHooks []RewardHook

var rewardBeforeUpdateMu sync.Mutex
var rewardBeforeUpdateHooks []RewardHook
var rewardAfterUpdateMu sync.Mutex
var rewardAfterUpdateHooks []RewardHook

var rewardBeforeDeleteMu sync.Mutex
var rewardBeforeDeleteHooks []RewardHook
var rewardAfterDeleteMu sync.Mutex
var rewardAfterDeleteHooks []RewardHook

var rewardBeforeUpsertMu sync.Mutex
var rewardBeforeUpsertHooks []RewardHook
var rewardAfterUpsertMu sync.Mutex
var rewardAfterUpsertHooks []RewardHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Reward) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rewardAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Reward) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rewardBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Reward) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rewardAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Reward) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rewardBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Reward) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rewardAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Reward) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rewardBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Reward) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rewardAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Reward) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rewardBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Reward) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rewardAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRewardHook registers your hook function for all future operations.
func AddRewardHook(hookPoint boil.HookPoint, rewardHook RewardHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		rewardAfterSelectMu.Lock()
		rewardAfterSelectHooks = append(rewardAfterSelectHooks, rewardHook)
		rewardAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		rewardBeforeInsertMu.Lock()
		rewardBeforeInsertHooks = append(rewardBeforeInsertHooks, rewardHook)
		rewardBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		rewardAfterInsertMu.Lock()
		rewardAfterInsertHooks = append(rewardAfterInsertHooks, rewardHook)
		rewardAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		rewardBeforeUpdateMu.Lock()
		rewardBeforeUpdateHooks = append(rewardBeforeUpdateHooks, rewardHook)
		rewardBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		rewardAfterUpdateMu.Lock()
		rewardAfterUpdateHooks = append(rewardAfterUpdateHooks, rewardHook)
		rewardAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		rewardBeforeDeleteMu.Lock()
		rewardBeforeDeleteHooks = append(rewardBeforeDeleteHooks, rewardHook)
		rewardBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		rewardAfterDeleteMu.Lock()
		rewardAfterDeleteHooks = append(rewardAfterDeleteHooks, rewardHook)
		rewardAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		rewardBeforeUpsertMu.Lock()
		rewardBeforeUpsertHooks = append(rewardBeforeUpsertHooks, rewardHook)
		rewardBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		rewardAfterUpsertMu.Lock()
		rewardAfterUpsertHooks = append(rewardAfterUpsertHooks, rewardHook)
		rewardAfterUpsertMu.Unlock()
	}
}

// One returns a single reward record from the query.
func (q rewardQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Reward, error) {
	o := &Reward{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for rewards")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Reward records from the query.
func (q rewardQuery) All(ctx context.Context, exec boil.ContextExecutor) (RewardSlice, error) {
	var o []*Reward

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Reward slice")
	}

	if len(rewardAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Reward records in the query.
func (q rewardQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count rewards rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q rewardQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if rewards exists")
	}

	return count > 0, nil
}

// IssuanceWeek pointed to by the foreign key.
func (o *Reward) IssuanceWeek(mods ...qm.QueryMod) issuanceWeekQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IssuanceWeekID),
	}

	queryMods = append(queryMods, mods...)

	return IssuanceWeeks(queryMods...)
}

// TransferMetaTransactionRequest pointed to by the foreign key.
func (o *Reward) TransferMetaTransactionRequest(mods ...qm.QueryMod) metaTransactionRequestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TransferMetaTransactionRequestID),
	}

	queryMods = append(queryMods, mods...)

	return MetaTransactionRequests(queryMods...)
}

// LoadIssuanceWeek allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (rewardL) LoadIssuanceWeek(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReward interface{}, mods queries.Applicator) error {
	var slice []*Reward
	var object *Reward

	if singular {
		var ok bool
		object, ok = maybeReward.(*Reward)
		if !ok {
			object = new(Reward)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReward))
			}
		}
	} else {
		s, ok := maybeReward.(*[]*Reward)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReward))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &rewardR{}
		}
		args[object.IssuanceWeekID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rewardR{}
			}

			args[obj.IssuanceWeekID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`rewards_api.issuance_weeks`),
		qm.WhereIn(`rewards_api.issuance_weeks.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load IssuanceWeek")
	}

	var resultSlice []*IssuanceWeek
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice IssuanceWeek")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for issuance_weeks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for issuance_weeks")
	}

	if len(issuanceWeekAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IssuanceWeek = foreign
		if foreign.R == nil {
			foreign.R = &issuanceWeekR{}
		}
		foreign.R.Rewards = append(foreign.R.Rewards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IssuanceWeekID == foreign.ID {
				local.R.IssuanceWeek = foreign
				if foreign.R == nil {
					foreign.R = &issuanceWeekR{}
				}
				foreign.R.Rewards = append(foreign.R.Rewards, local)
				break
			}
		}
	}

	return nil
}

// LoadTransferMetaTransactionRequest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (rewardL) LoadTransferMetaTransactionRequest(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReward interface{}, mods queries.Applicator) error {
	var slice []*Reward
	var object *Reward

	if singular {
		var ok bool
		object, ok = maybeReward.(*Reward)
		if !ok {
			object = new(Reward)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReward))
			}
		}
	} else {
		s, ok := maybeReward.(*[]*Reward)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReward))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &rewardR{}
		}
		if !queries.IsNil(object.TransferMetaTransactionRequestID) {
			args[object.TransferMetaTransactionRequestID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rewardR{}
			}

			if !queries.IsNil(obj.TransferMetaTransactionRequestID) {
				args[obj.TransferMetaTransactionRequestID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`rewards_api.meta_transaction_requests`),
		qm.WhereIn(`rewards_api.meta_transaction_requests.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MetaTransactionRequest")
	}

	var resultSlice []*MetaTransactionRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MetaTransactionRequest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for meta_transaction_requests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for meta_transaction_requests")
	}

	if len(metaTransactionRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TransferMetaTransactionRequest = foreign
		if foreign.R == nil {
			foreign.R = &metaTransactionRequestR{}
		}
		foreign.R.TransferMetaTransactionRequestRewards = append(foreign.R.TransferMetaTransactionRequestRewards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TransferMetaTransactionRequestID, foreign.ID) {
				local.R.TransferMetaTransactionRequest = foreign
				if foreign.R == nil {
					foreign.R = &metaTransactionRequestR{}
				}
				foreign.R.TransferMetaTransactionRequestRewards = append(foreign.R.TransferMetaTransactionRequestRewards, local)
				break
			}
		}
	}

	return nil
}

// SetIssuanceWeek of the reward to the related item.
// Sets o.R.IssuanceWeek to related.
// Adds o to related.R.Rewards.
func (o *Reward) SetIssuanceWeek(ctx context.Context, exec boil.ContextExecutor, insert bool, related *IssuanceWeek) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"rewards_api\".\"rewards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"issuance_week_id"}),
		strmangle.WhereClause("\"", "\"", 2, rewardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.IssuanceWeekID, o.UserDeviceID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IssuanceWeekID = related.ID
	if o.R == nil {
		o.R = &rewardR{
			IssuanceWeek: related,
		}
	} else {
		o.R.IssuanceWeek = related
	}

	if related.R == nil {
		related.R = &issuanceWeekR{
			Rewards: RewardSlice{o},
		}
	} else {
		related.R.Rewards = append(related.R.Rewards, o)
	}

	return nil
}

// SetTransferMetaTransactionRequest of the reward to the related item.
// Sets o.R.TransferMetaTransactionRequest to related.
// Adds o to related.R.TransferMetaTransactionRequestRewards.
func (o *Reward) SetTransferMetaTransactionRequest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MetaTransactionRequest) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"rewards_api\".\"rewards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"transfer_meta_transaction_request_id"}),
		strmangle.WhereClause("\"", "\"", 2, rewardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.IssuanceWeekID, o.UserDeviceID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TransferMetaTransactionRequestID, related.ID)
	if o.R == nil {
		o.R = &rewardR{
			TransferMetaTransactionRequest: related,
		}
	} else {
		o.R.TransferMetaTransactionRequest = related
	}

	if related.R == nil {
		related.R = &metaTransactionRequestR{
			TransferMetaTransactionRequestRewards: RewardSlice{o},
		}
	} else {
		related.R.TransferMetaTransactionRequestRewards = append(related.R.TransferMetaTransactionRequestRewards, o)
	}

	return nil
}

// RemoveTransferMetaTransactionRequest relationship.
// Sets o.R.TransferMetaTransactionRequest to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Reward) RemoveTransferMetaTransactionRequest(ctx context.Context, exec boil.ContextExecutor, related *MetaTransactionRequest) error {
	var err error

	queries.SetScanner(&o.TransferMetaTransactionRequestID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("transfer_meta_transaction_request_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.TransferMetaTransactionRequest = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TransferMetaTransactionRequestRewards {
		if queries.Equal(o.TransferMetaTransactionRequestID, ri.TransferMetaTransactionRequestID) {
			continue
		}

		ln := len(related.R.TransferMetaTransactionRequestRewards)
		if ln > 1 && i < ln-1 {
			related.R.TransferMetaTransactionRequestRewards[i] = related.R.TransferMetaTransactionRequestRewards[ln-1]
		}
		related.R.TransferMetaTransactionRequestRewards = related.R.TransferMetaTransactionRequestRewards[:ln-1]
		break
	}
	return nil
}

// Rewards retrieves all the records using an executor.
func Rewards(mods ...qm.QueryMod) rewardQuery {
	mods = append(mods, qm.From("\"rewards_api\".\"rewards\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"rewards_api\".\"rewards\".*"})
	}

	return rewardQuery{q}
}

// FindReward retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReward(ctx context.Context, exec boil.ContextExecutor, issuanceWeekID int, userDeviceID string, selectCols ...string) (*Reward, error) {
	rewardObj := &Reward{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rewards_api\".\"rewards\" where \"issuance_week_id\"=$1 AND \"user_device_id\"=$2", sel,
	)

	q := queries.Raw(query, issuanceWeekID, userDeviceID)

	err := q.Bind(ctx, exec, rewardObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from rewards")
	}

	if err = rewardObj.doAfterSelectHooks(ctx, exec); err != nil {
		return rewardObj, err
	}

	return rewardObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Reward) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rewards provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rewardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	rewardInsertCacheMut.RLock()
	cache, cached := rewardInsertCache[key]
	rewardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			rewardAllColumns,
			rewardColumnsWithDefault,
			rewardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(rewardType, rewardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rewardType, rewardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rewards_api\".\"rewards\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rewards_api\".\"rewards\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into rewards")
	}

	if !cached {
		rewardInsertCacheMut.Lock()
		rewardInsertCache[key] = cache
		rewardInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Reward.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Reward) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	rewardUpdateCacheMut.RLock()
	cache, cached := rewardUpdateCache[key]
	rewardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			rewardAllColumns,
			rewardPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update rewards, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rewards_api\".\"rewards\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, rewardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rewardType, rewardMapping, append(wl, rewardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update rewards row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for rewards")
	}

	if !cached {
		rewardUpdateCacheMut.Lock()
		rewardUpdateCache[key] = cache
		rewardUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q rewardQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for rewards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for rewards")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RewardSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rewards_api\".\"rewards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, rewardPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reward slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reward")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Reward) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no rewards provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rewardColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	rewardUpsertCacheMut.RLock()
	cache, cached := rewardUpsertCache[key]
	rewardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			rewardAllColumns,
			rewardColumnsWithDefault,
			rewardColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			rewardAllColumns,
			rewardPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert rewards, could not build update column list")
		}

		ret := strmangle.SetComplement(rewardAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(rewardPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert rewards, could not build conflict column list")
			}

			conflict = make([]string, len(rewardPrimaryKeyColumns))
			copy(conflict, rewardPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"rewards_api\".\"rewards\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(rewardType, rewardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(rewardType, rewardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert rewards")
	}

	if !cached {
		rewardUpsertCacheMut.Lock()
		rewardUpsertCache[key] = cache
		rewardUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Reward record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Reward) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Reward provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rewardPrimaryKeyMapping)
	sql := "DELETE FROM \"rewards_api\".\"rewards\" WHERE \"issuance_week_id\"=$1 AND \"user_device_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from rewards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for rewards")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q rewardQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no rewardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rewards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rewards")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RewardSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(rewardBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rewards_api\".\"rewards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rewardPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reward slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rewards")
	}

	if len(rewardAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Reward) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReward(ctx, exec, o.IssuanceWeekID, o.UserDeviceID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RewardSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RewardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rewards_api\".\"rewards\".* FROM \"rewards_api\".\"rewards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rewardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RewardSlice")
	}

	*o = slice

	return nil
}

// RewardExists checks if the Reward row exists.
func RewardExists(ctx context.Context, exec boil.ContextExecutor, issuanceWeekID int, userDeviceID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rewards_api\".\"rewards\" where \"issuance_week_id\"=$1 AND \"user_device_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, issuanceWeekID, userDeviceID)
	}
	row := exec.QueryRowContext(ctx, sql, issuanceWeekID, userDeviceID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if rewards exists")
	}

	return exists, nil
}

// Exists checks if the Reward row exists.
func (o *Reward) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RewardExists(ctx, exec, o.IssuanceWeekID, o.UserDeviceID)
}
