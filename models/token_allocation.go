// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// TokenAllocation is an object representing the database table.
type TokenAllocation struct {
	IssuanceWeekID int               `boil:"issuance_week_id" json:"issuance_week_id" toml:"issuance_week_id" yaml:"issuance_week_id"`
	UserDeviceID   string            `boil:"user_device_id" json:"user_device_id" toml:"user_device_id" yaml:"user_device_id"`
	UserID         string            `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Tokens         types.NullDecimal `boil:"tokens" json:"tokens,omitempty" toml:"tokens" yaml:"tokens,omitempty"`
	WeekStart      time.Time         `boil:"week_start" json:"week_start" toml:"week_start" yaml:"week_start"`
	WeekEnd        time.Time         `boil:"week_end" json:"week_end" toml:"week_end" yaml:"week_end"`

	R *tokenAllocationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tokenAllocationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TokenAllocationColumns = struct {
	IssuanceWeekID string
	UserDeviceID   string
	UserID         string
	Tokens         string
	WeekStart      string
	WeekEnd        string
}{
	IssuanceWeekID: "issuance_week_id",
	UserDeviceID:   "user_device_id",
	UserID:         "user_id",
	Tokens:         "tokens",
	WeekStart:      "week_start",
	WeekEnd:        "week_end",
}

var TokenAllocationTableColumns = struct {
	IssuanceWeekID string
	UserDeviceID   string
	UserID         string
	Tokens         string
	WeekStart      string
	WeekEnd        string
}{
	IssuanceWeekID: "token_allocation.issuance_week_id",
	UserDeviceID:   "token_allocation.user_device_id",
	UserID:         "token_allocation.user_id",
	Tokens:         "token_allocation.tokens",
	WeekStart:      "token_allocation.week_start",
	WeekEnd:        "token_allocation.week_end",
}

// Generated where

var TokenAllocationWhere = struct {
	IssuanceWeekID whereHelperint
	UserDeviceID   whereHelperstring
	UserID         whereHelperstring
	Tokens         whereHelpertypes_NullDecimal
	WeekStart      whereHelpertime_Time
	WeekEnd        whereHelpertime_Time
}{
	IssuanceWeekID: whereHelperint{field: "\"rewards_api\".\"token_allocation\".\"issuance_week_id\""},
	UserDeviceID:   whereHelperstring{field: "\"rewards_api\".\"token_allocation\".\"user_device_id\""},
	UserID:         whereHelperstring{field: "\"rewards_api\".\"token_allocation\".\"user_id\""},
	Tokens:         whereHelpertypes_NullDecimal{field: "\"rewards_api\".\"token_allocation\".\"tokens\""},
	WeekStart:      whereHelpertime_Time{field: "\"rewards_api\".\"token_allocation\".\"week_start\""},
	WeekEnd:        whereHelpertime_Time{field: "\"rewards_api\".\"token_allocation\".\"week_end\""},
}

// TokenAllocationRels is where relationship names are stored.
var TokenAllocationRels = struct {
}{}

// tokenAllocationR is where relationships are stored.
type tokenAllocationR struct {
}

// NewStruct creates a new relationship struct
func (*tokenAllocationR) NewStruct() *tokenAllocationR {
	return &tokenAllocationR{}
}

// tokenAllocationL is where Load methods for each relationship are stored.
type tokenAllocationL struct{}

var (
	tokenAllocationAllColumns            = []string{"issuance_week_id", "user_device_id", "user_id", "tokens", "week_start", "week_end"}
	tokenAllocationColumnsWithoutDefault = []string{"issuance_week_id", "user_device_id", "user_id", "week_start", "week_end"}
	tokenAllocationColumnsWithDefault    = []string{"tokens"}
	tokenAllocationPrimaryKeyColumns     = []string{"user_device_id"}
	tokenAllocationGeneratedColumns      = []string{}
)

type (
	// TokenAllocationSlice is an alias for a slice of pointers to TokenAllocation.
	// This should almost always be used instead of []TokenAllocation.
	TokenAllocationSlice []*TokenAllocation
	// TokenAllocationHook is the signature for custom TokenAllocation hook methods
	TokenAllocationHook func(context.Context, boil.ContextExecutor, *TokenAllocation) error

	tokenAllocationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tokenAllocationType                 = reflect.TypeOf(&TokenAllocation{})
	tokenAllocationMapping              = queries.MakeStructMapping(tokenAllocationType)
	tokenAllocationPrimaryKeyMapping, _ = queries.BindMapping(tokenAllocationType, tokenAllocationMapping, tokenAllocationPrimaryKeyColumns)
	tokenAllocationInsertCacheMut       sync.RWMutex
	tokenAllocationInsertCache          = make(map[string]insertCache)
	tokenAllocationUpdateCacheMut       sync.RWMutex
	tokenAllocationUpdateCache          = make(map[string]updateCache)
	tokenAllocationUpsertCacheMut       sync.RWMutex
	tokenAllocationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tokenAllocationAfterSelectHooks []TokenAllocationHook

var tokenAllocationBeforeInsertHooks []TokenAllocationHook
var tokenAllocationAfterInsertHooks []TokenAllocationHook

var tokenAllocationBeforeUpdateHooks []TokenAllocationHook
var tokenAllocationAfterUpdateHooks []TokenAllocationHook

var tokenAllocationBeforeDeleteHooks []TokenAllocationHook
var tokenAllocationAfterDeleteHooks []TokenAllocationHook

var tokenAllocationBeforeUpsertHooks []TokenAllocationHook
var tokenAllocationAfterUpsertHooks []TokenAllocationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TokenAllocation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenAllocationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TokenAllocation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenAllocationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TokenAllocation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenAllocationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TokenAllocation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenAllocationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TokenAllocation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenAllocationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TokenAllocation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenAllocationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TokenAllocation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenAllocationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TokenAllocation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenAllocationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TokenAllocation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenAllocationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTokenAllocationHook registers your hook function for all future operations.
func AddTokenAllocationHook(hookPoint boil.HookPoint, tokenAllocationHook TokenAllocationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tokenAllocationAfterSelectHooks = append(tokenAllocationAfterSelectHooks, tokenAllocationHook)
	case boil.BeforeInsertHook:
		tokenAllocationBeforeInsertHooks = append(tokenAllocationBeforeInsertHooks, tokenAllocationHook)
	case boil.AfterInsertHook:
		tokenAllocationAfterInsertHooks = append(tokenAllocationAfterInsertHooks, tokenAllocationHook)
	case boil.BeforeUpdateHook:
		tokenAllocationBeforeUpdateHooks = append(tokenAllocationBeforeUpdateHooks, tokenAllocationHook)
	case boil.AfterUpdateHook:
		tokenAllocationAfterUpdateHooks = append(tokenAllocationAfterUpdateHooks, tokenAllocationHook)
	case boil.BeforeDeleteHook:
		tokenAllocationBeforeDeleteHooks = append(tokenAllocationBeforeDeleteHooks, tokenAllocationHook)
	case boil.AfterDeleteHook:
		tokenAllocationAfterDeleteHooks = append(tokenAllocationAfterDeleteHooks, tokenAllocationHook)
	case boil.BeforeUpsertHook:
		tokenAllocationBeforeUpsertHooks = append(tokenAllocationBeforeUpsertHooks, tokenAllocationHook)
	case boil.AfterUpsertHook:
		tokenAllocationAfterUpsertHooks = append(tokenAllocationAfterUpsertHooks, tokenAllocationHook)
	}
}

// One returns a single tokenAllocation record from the query.
func (q tokenAllocationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TokenAllocation, error) {
	o := &TokenAllocation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for token_allocation")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TokenAllocation records from the query.
func (q tokenAllocationQuery) All(ctx context.Context, exec boil.ContextExecutor) (TokenAllocationSlice, error) {
	var o []*TokenAllocation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TokenAllocation slice")
	}

	if len(tokenAllocationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TokenAllocation records in the query.
func (q tokenAllocationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count token_allocation rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tokenAllocationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if token_allocation exists")
	}

	return count > 0, nil
}

// TokenAllocations retrieves all the records using an executor.
func TokenAllocations(mods ...qm.QueryMod) tokenAllocationQuery {
	mods = append(mods, qm.From("\"rewards_api\".\"token_allocation\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"rewards_api\".\"token_allocation\".*"})
	}

	return tokenAllocationQuery{q}
}

// FindTokenAllocation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTokenAllocation(ctx context.Context, exec boil.ContextExecutor, userDeviceID string, selectCols ...string) (*TokenAllocation, error) {
	tokenAllocationObj := &TokenAllocation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rewards_api\".\"token_allocation\" where \"user_device_id\"=$1", sel,
	)

	q := queries.Raw(query, userDeviceID)

	err := q.Bind(ctx, exec, tokenAllocationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from token_allocation")
	}

	if err = tokenAllocationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tokenAllocationObj, err
	}

	return tokenAllocationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TokenAllocation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no token_allocation provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tokenAllocationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tokenAllocationInsertCacheMut.RLock()
	cache, cached := tokenAllocationInsertCache[key]
	tokenAllocationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tokenAllocationAllColumns,
			tokenAllocationColumnsWithDefault,
			tokenAllocationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tokenAllocationType, tokenAllocationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tokenAllocationType, tokenAllocationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rewards_api\".\"token_allocation\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rewards_api\".\"token_allocation\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into token_allocation")
	}

	if !cached {
		tokenAllocationInsertCacheMut.Lock()
		tokenAllocationInsertCache[key] = cache
		tokenAllocationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TokenAllocation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TokenAllocation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tokenAllocationUpdateCacheMut.RLock()
	cache, cached := tokenAllocationUpdateCache[key]
	tokenAllocationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tokenAllocationAllColumns,
			tokenAllocationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update token_allocation, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rewards_api\".\"token_allocation\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tokenAllocationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tokenAllocationType, tokenAllocationMapping, append(wl, tokenAllocationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update token_allocation row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for token_allocation")
	}

	if !cached {
		tokenAllocationUpdateCacheMut.Lock()
		tokenAllocationUpdateCache[key] = cache
		tokenAllocationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tokenAllocationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for token_allocation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for token_allocation")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TokenAllocationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tokenAllocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rewards_api\".\"token_allocation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tokenAllocationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tokenAllocation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tokenAllocation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TokenAllocation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no token_allocation provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tokenAllocationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tokenAllocationUpsertCacheMut.RLock()
	cache, cached := tokenAllocationUpsertCache[key]
	tokenAllocationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tokenAllocationAllColumns,
			tokenAllocationColumnsWithDefault,
			tokenAllocationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tokenAllocationAllColumns,
			tokenAllocationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert token_allocation, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tokenAllocationPrimaryKeyColumns))
			copy(conflict, tokenAllocationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"rewards_api\".\"token_allocation\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tokenAllocationType, tokenAllocationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tokenAllocationType, tokenAllocationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert token_allocation")
	}

	if !cached {
		tokenAllocationUpsertCacheMut.Lock()
		tokenAllocationUpsertCache[key] = cache
		tokenAllocationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TokenAllocation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TokenAllocation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TokenAllocation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tokenAllocationPrimaryKeyMapping)
	sql := "DELETE FROM \"rewards_api\".\"token_allocation\" WHERE \"user_device_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from token_allocation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for token_allocation")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tokenAllocationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tokenAllocationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from token_allocation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for token_allocation")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TokenAllocationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tokenAllocationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tokenAllocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rewards_api\".\"token_allocation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tokenAllocationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tokenAllocation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for token_allocation")
	}

	if len(tokenAllocationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TokenAllocation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTokenAllocation(ctx, exec, o.UserDeviceID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TokenAllocationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TokenAllocationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tokenAllocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rewards_api\".\"token_allocation\".* FROM \"rewards_api\".\"token_allocation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tokenAllocationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TokenAllocationSlice")
	}

	*o = slice

	return nil
}

// TokenAllocationExists checks if the TokenAllocation row exists.
func TokenAllocationExists(ctx context.Context, exec boil.ContextExecutor, userDeviceID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rewards_api\".\"token_allocation\" where \"user_device_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userDeviceID)
	}
	row := exec.QueryRowContext(ctx, sql, userDeviceID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if token_allocation exists")
	}

	return exists, nil
}
