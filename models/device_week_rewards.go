// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DeviceWeekReward is an object representing the database table.
type DeviceWeekReward struct {
	UserDeviceID            string    `boil:"user_device_id" json:"user_device_id" toml:"user_device_id" yaml:"user_device_id"`
	IssuanceWeekID          int       `boil:"issuance_week_id" json:"issuance_week_id" toml:"issuance_week_id" yaml:"issuance_week_id"`
	DeviceDefinitionID      string    `boil:"device_definition_id" json:"device_definition_id" toml:"device_definition_id" yaml:"device_definition_id"`
	Vin                     string    `boil:"vin" json:"vin" toml:"vin" yaml:"vin"`
	UserID                  string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	CreatedAt               time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt               time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	MilesDriven             float64   `boil:"miles_driven" json:"miles_driven" toml:"miles_driven" yaml:"miles_driven"`
	Connected               bool      `boil:"connected" json:"connected" toml:"connected" yaml:"connected"`
	WeeksConnectedStreak    int       `boil:"weeks_connected_streak" json:"weeks_connected_streak" toml:"weeks_connected_streak" yaml:"weeks_connected_streak"`
	WeeksDisconnectedStreak int       `boil:"weeks_disconnected_streak" json:"weeks_disconnected_streak" toml:"weeks_disconnected_streak" yaml:"weeks_disconnected_streak"`
	StreakPoints            int       `boil:"streak_points" json:"streak_points" toml:"streak_points" yaml:"streak_points"`
	ConnectionMethodPoints  int       `boil:"connection_method_points" json:"connection_method_points" toml:"connection_method_points" yaml:"connection_method_points"`
	EngineTypePoints        int       `boil:"engine_type_points" json:"engine_type_points" toml:"engine_type_points" yaml:"engine_type_points"`
	RarityPoints            int       `boil:"rarity_points" json:"rarity_points" toml:"rarity_points" yaml:"rarity_points"`

	R *deviceWeekRewardR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deviceWeekRewardL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeviceWeekRewardColumns = struct {
	UserDeviceID            string
	IssuanceWeekID          string
	DeviceDefinitionID      string
	Vin                     string
	UserID                  string
	CreatedAt               string
	UpdatedAt               string
	MilesDriven             string
	Connected               string
	WeeksConnectedStreak    string
	WeeksDisconnectedStreak string
	StreakPoints            string
	ConnectionMethodPoints  string
	EngineTypePoints        string
	RarityPoints            string
}{
	UserDeviceID:            "user_device_id",
	IssuanceWeekID:          "issuance_week_id",
	DeviceDefinitionID:      "device_definition_id",
	Vin:                     "vin",
	UserID:                  "user_id",
	CreatedAt:               "created_at",
	UpdatedAt:               "updated_at",
	MilesDriven:             "miles_driven",
	Connected:               "connected",
	WeeksConnectedStreak:    "weeks_connected_streak",
	WeeksDisconnectedStreak: "weeks_disconnected_streak",
	StreakPoints:            "streak_points",
	ConnectionMethodPoints:  "connection_method_points",
	EngineTypePoints:        "engine_type_points",
	RarityPoints:            "rarity_points",
}

var DeviceWeekRewardTableColumns = struct {
	UserDeviceID            string
	IssuanceWeekID          string
	DeviceDefinitionID      string
	Vin                     string
	UserID                  string
	CreatedAt               string
	UpdatedAt               string
	MilesDriven             string
	Connected               string
	WeeksConnectedStreak    string
	WeeksDisconnectedStreak string
	StreakPoints            string
	ConnectionMethodPoints  string
	EngineTypePoints        string
	RarityPoints            string
}{
	UserDeviceID:            "device_week_rewards.user_device_id",
	IssuanceWeekID:          "device_week_rewards.issuance_week_id",
	DeviceDefinitionID:      "device_week_rewards.device_definition_id",
	Vin:                     "device_week_rewards.vin",
	UserID:                  "device_week_rewards.user_id",
	CreatedAt:               "device_week_rewards.created_at",
	UpdatedAt:               "device_week_rewards.updated_at",
	MilesDriven:             "device_week_rewards.miles_driven",
	Connected:               "device_week_rewards.connected",
	WeeksConnectedStreak:    "device_week_rewards.weeks_connected_streak",
	WeeksDisconnectedStreak: "device_week_rewards.weeks_disconnected_streak",
	StreakPoints:            "device_week_rewards.streak_points",
	ConnectionMethodPoints:  "device_week_rewards.connection_method_points",
	EngineTypePoints:        "device_week_rewards.engine_type_points",
	RarityPoints:            "device_week_rewards.rarity_points",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var DeviceWeekRewardWhere = struct {
	UserDeviceID            whereHelperstring
	IssuanceWeekID          whereHelperint
	DeviceDefinitionID      whereHelperstring
	Vin                     whereHelperstring
	UserID                  whereHelperstring
	CreatedAt               whereHelpertime_Time
	UpdatedAt               whereHelpertime_Time
	MilesDriven             whereHelperfloat64
	Connected               whereHelperbool
	WeeksConnectedStreak    whereHelperint
	WeeksDisconnectedStreak whereHelperint
	StreakPoints            whereHelperint
	ConnectionMethodPoints  whereHelperint
	EngineTypePoints        whereHelperint
	RarityPoints            whereHelperint
}{
	UserDeviceID:            whereHelperstring{field: "\"rewards_api\".\"device_week_rewards\".\"user_device_id\""},
	IssuanceWeekID:          whereHelperint{field: "\"rewards_api\".\"device_week_rewards\".\"issuance_week_id\""},
	DeviceDefinitionID:      whereHelperstring{field: "\"rewards_api\".\"device_week_rewards\".\"device_definition_id\""},
	Vin:                     whereHelperstring{field: "\"rewards_api\".\"device_week_rewards\".\"vin\""},
	UserID:                  whereHelperstring{field: "\"rewards_api\".\"device_week_rewards\".\"user_id\""},
	CreatedAt:               whereHelpertime_Time{field: "\"rewards_api\".\"device_week_rewards\".\"created_at\""},
	UpdatedAt:               whereHelpertime_Time{field: "\"rewards_api\".\"device_week_rewards\".\"updated_at\""},
	MilesDriven:             whereHelperfloat64{field: "\"rewards_api\".\"device_week_rewards\".\"miles_driven\""},
	Connected:               whereHelperbool{field: "\"rewards_api\".\"device_week_rewards\".\"connected\""},
	WeeksConnectedStreak:    whereHelperint{field: "\"rewards_api\".\"device_week_rewards\".\"weeks_connected_streak\""},
	WeeksDisconnectedStreak: whereHelperint{field: "\"rewards_api\".\"device_week_rewards\".\"weeks_disconnected_streak\""},
	StreakPoints:            whereHelperint{field: "\"rewards_api\".\"device_week_rewards\".\"streak_points\""},
	ConnectionMethodPoints:  whereHelperint{field: "\"rewards_api\".\"device_week_rewards\".\"connection_method_points\""},
	EngineTypePoints:        whereHelperint{field: "\"rewards_api\".\"device_week_rewards\".\"engine_type_points\""},
	RarityPoints:            whereHelperint{field: "\"rewards_api\".\"device_week_rewards\".\"rarity_points\""},
}

// DeviceWeekRewardRels is where relationship names are stored.
var DeviceWeekRewardRels = struct {
}{}

// deviceWeekRewardR is where relationships are stored.
type deviceWeekRewardR struct {
}

// NewStruct creates a new relationship struct
func (*deviceWeekRewardR) NewStruct() *deviceWeekRewardR {
	return &deviceWeekRewardR{}
}

// deviceWeekRewardL is where Load methods for each relationship are stored.
type deviceWeekRewardL struct{}

var (
	deviceWeekRewardAllColumns            = []string{"user_device_id", "issuance_week_id", "device_definition_id", "vin", "user_id", "created_at", "updated_at", "miles_driven", "connected", "weeks_connected_streak", "weeks_disconnected_streak", "streak_points", "connection_method_points", "engine_type_points", "rarity_points"}
	deviceWeekRewardColumnsWithoutDefault = []string{"user_device_id", "issuance_week_id", "device_definition_id", "vin", "user_id", "miles_driven", "connected", "weeks_connected_streak", "weeks_disconnected_streak", "streak_points", "connection_method_points", "engine_type_points", "rarity_points"}
	deviceWeekRewardColumnsWithDefault    = []string{"created_at", "updated_at"}
	deviceWeekRewardPrimaryKeyColumns     = []string{"issuance_week_id", "user_device_id"}
	deviceWeekRewardGeneratedColumns      = []string{}
)

type (
	// DeviceWeekRewardSlice is an alias for a slice of pointers to DeviceWeekReward.
	// This should almost always be used instead of []DeviceWeekReward.
	DeviceWeekRewardSlice []*DeviceWeekReward
	// DeviceWeekRewardHook is the signature for custom DeviceWeekReward hook methods
	DeviceWeekRewardHook func(context.Context, boil.ContextExecutor, *DeviceWeekReward) error

	deviceWeekRewardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deviceWeekRewardType                 = reflect.TypeOf(&DeviceWeekReward{})
	deviceWeekRewardMapping              = queries.MakeStructMapping(deviceWeekRewardType)
	deviceWeekRewardPrimaryKeyMapping, _ = queries.BindMapping(deviceWeekRewardType, deviceWeekRewardMapping, deviceWeekRewardPrimaryKeyColumns)
	deviceWeekRewardInsertCacheMut       sync.RWMutex
	deviceWeekRewardInsertCache          = make(map[string]insertCache)
	deviceWeekRewardUpdateCacheMut       sync.RWMutex
	deviceWeekRewardUpdateCache          = make(map[string]updateCache)
	deviceWeekRewardUpsertCacheMut       sync.RWMutex
	deviceWeekRewardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var deviceWeekRewardAfterSelectHooks []DeviceWeekRewardHook

var deviceWeekRewardBeforeInsertHooks []DeviceWeekRewardHook
var deviceWeekRewardAfterInsertHooks []DeviceWeekRewardHook

var deviceWeekRewardBeforeUpdateHooks []DeviceWeekRewardHook
var deviceWeekRewardAfterUpdateHooks []DeviceWeekRewardHook

var deviceWeekRewardBeforeDeleteHooks []DeviceWeekRewardHook
var deviceWeekRewardAfterDeleteHooks []DeviceWeekRewardHook

var deviceWeekRewardBeforeUpsertHooks []DeviceWeekRewardHook
var deviceWeekRewardAfterUpsertHooks []DeviceWeekRewardHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DeviceWeekReward) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceWeekRewardAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DeviceWeekReward) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceWeekRewardBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DeviceWeekReward) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceWeekRewardAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DeviceWeekReward) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceWeekRewardBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DeviceWeekReward) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceWeekRewardAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DeviceWeekReward) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceWeekRewardBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DeviceWeekReward) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceWeekRewardAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DeviceWeekReward) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceWeekRewardBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DeviceWeekReward) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceWeekRewardAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeviceWeekRewardHook registers your hook function for all future operations.
func AddDeviceWeekRewardHook(hookPoint boil.HookPoint, deviceWeekRewardHook DeviceWeekRewardHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		deviceWeekRewardAfterSelectHooks = append(deviceWeekRewardAfterSelectHooks, deviceWeekRewardHook)
	case boil.BeforeInsertHook:
		deviceWeekRewardBeforeInsertHooks = append(deviceWeekRewardBeforeInsertHooks, deviceWeekRewardHook)
	case boil.AfterInsertHook:
		deviceWeekRewardAfterInsertHooks = append(deviceWeekRewardAfterInsertHooks, deviceWeekRewardHook)
	case boil.BeforeUpdateHook:
		deviceWeekRewardBeforeUpdateHooks = append(deviceWeekRewardBeforeUpdateHooks, deviceWeekRewardHook)
	case boil.AfterUpdateHook:
		deviceWeekRewardAfterUpdateHooks = append(deviceWeekRewardAfterUpdateHooks, deviceWeekRewardHook)
	case boil.BeforeDeleteHook:
		deviceWeekRewardBeforeDeleteHooks = append(deviceWeekRewardBeforeDeleteHooks, deviceWeekRewardHook)
	case boil.AfterDeleteHook:
		deviceWeekRewardAfterDeleteHooks = append(deviceWeekRewardAfterDeleteHooks, deviceWeekRewardHook)
	case boil.BeforeUpsertHook:
		deviceWeekRewardBeforeUpsertHooks = append(deviceWeekRewardBeforeUpsertHooks, deviceWeekRewardHook)
	case boil.AfterUpsertHook:
		deviceWeekRewardAfterUpsertHooks = append(deviceWeekRewardAfterUpsertHooks, deviceWeekRewardHook)
	}
}

// One returns a single deviceWeekReward record from the query.
func (q deviceWeekRewardQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeviceWeekReward, error) {
	o := &DeviceWeekReward{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for device_week_rewards")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DeviceWeekReward records from the query.
func (q deviceWeekRewardQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeviceWeekRewardSlice, error) {
	var o []*DeviceWeekReward

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DeviceWeekReward slice")
	}

	if len(deviceWeekRewardAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DeviceWeekReward records in the query.
func (q deviceWeekRewardQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count device_week_rewards rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q deviceWeekRewardQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if device_week_rewards exists")
	}

	return count > 0, nil
}

// DeviceWeekRewards retrieves all the records using an executor.
func DeviceWeekRewards(mods ...qm.QueryMod) deviceWeekRewardQuery {
	mods = append(mods, qm.From("\"rewards_api\".\"device_week_rewards\""))
	return deviceWeekRewardQuery{NewQuery(mods...)}
}

// FindDeviceWeekReward retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeviceWeekReward(ctx context.Context, exec boil.ContextExecutor, issuanceWeekID int, userDeviceID string, selectCols ...string) (*DeviceWeekReward, error) {
	deviceWeekRewardObj := &DeviceWeekReward{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rewards_api\".\"device_week_rewards\" where \"issuance_week_id\"=$1 AND \"user_device_id\"=$2", sel,
	)

	q := queries.Raw(query, issuanceWeekID, userDeviceID)

	err := q.Bind(ctx, exec, deviceWeekRewardObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from device_week_rewards")
	}

	if err = deviceWeekRewardObj.doAfterSelectHooks(ctx, exec); err != nil {
		return deviceWeekRewardObj, err
	}

	return deviceWeekRewardObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeviceWeekReward) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no device_week_rewards provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deviceWeekRewardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deviceWeekRewardInsertCacheMut.RLock()
	cache, cached := deviceWeekRewardInsertCache[key]
	deviceWeekRewardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deviceWeekRewardAllColumns,
			deviceWeekRewardColumnsWithDefault,
			deviceWeekRewardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deviceWeekRewardType, deviceWeekRewardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deviceWeekRewardType, deviceWeekRewardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rewards_api\".\"device_week_rewards\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rewards_api\".\"device_week_rewards\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into device_week_rewards")
	}

	if !cached {
		deviceWeekRewardInsertCacheMut.Lock()
		deviceWeekRewardInsertCache[key] = cache
		deviceWeekRewardInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DeviceWeekReward.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeviceWeekReward) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	deviceWeekRewardUpdateCacheMut.RLock()
	cache, cached := deviceWeekRewardUpdateCache[key]
	deviceWeekRewardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deviceWeekRewardAllColumns,
			deviceWeekRewardPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update device_week_rewards, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rewards_api\".\"device_week_rewards\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, deviceWeekRewardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deviceWeekRewardType, deviceWeekRewardMapping, append(wl, deviceWeekRewardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update device_week_rewards row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for device_week_rewards")
	}

	if !cached {
		deviceWeekRewardUpdateCacheMut.Lock()
		deviceWeekRewardUpdateCache[key] = cache
		deviceWeekRewardUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q deviceWeekRewardQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for device_week_rewards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for device_week_rewards")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeviceWeekRewardSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceWeekRewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rewards_api\".\"device_week_rewards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, deviceWeekRewardPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in deviceWeekReward slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all deviceWeekReward")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeviceWeekReward) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no device_week_rewards provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deviceWeekRewardColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deviceWeekRewardUpsertCacheMut.RLock()
	cache, cached := deviceWeekRewardUpsertCache[key]
	deviceWeekRewardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			deviceWeekRewardAllColumns,
			deviceWeekRewardColumnsWithDefault,
			deviceWeekRewardColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deviceWeekRewardAllColumns,
			deviceWeekRewardPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert device_week_rewards, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(deviceWeekRewardPrimaryKeyColumns))
			copy(conflict, deviceWeekRewardPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"rewards_api\".\"device_week_rewards\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(deviceWeekRewardType, deviceWeekRewardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deviceWeekRewardType, deviceWeekRewardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert device_week_rewards")
	}

	if !cached {
		deviceWeekRewardUpsertCacheMut.Lock()
		deviceWeekRewardUpsertCache[key] = cache
		deviceWeekRewardUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DeviceWeekReward record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeviceWeekReward) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DeviceWeekReward provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deviceWeekRewardPrimaryKeyMapping)
	sql := "DELETE FROM \"rewards_api\".\"device_week_rewards\" WHERE \"issuance_week_id\"=$1 AND \"user_device_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from device_week_rewards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for device_week_rewards")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q deviceWeekRewardQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no deviceWeekRewardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from device_week_rewards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for device_week_rewards")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeviceWeekRewardSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(deviceWeekRewardBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceWeekRewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rewards_api\".\"device_week_rewards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deviceWeekRewardPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from deviceWeekReward slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for device_week_rewards")
	}

	if len(deviceWeekRewardAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeviceWeekReward) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeviceWeekReward(ctx, exec, o.IssuanceWeekID, o.UserDeviceID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeviceWeekRewardSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeviceWeekRewardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceWeekRewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rewards_api\".\"device_week_rewards\".* FROM \"rewards_api\".\"device_week_rewards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deviceWeekRewardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DeviceWeekRewardSlice")
	}

	*o = slice

	return nil
}

// DeviceWeekRewardExists checks if the DeviceWeekReward row exists.
func DeviceWeekRewardExists(ctx context.Context, exec boil.ContextExecutor, issuanceWeekID int, userDeviceID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rewards_api\".\"device_week_rewards\" where \"issuance_week_id\"=$1 AND \"user_device_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, issuanceWeekID, userDeviceID)
	}
	row := exec.QueryRowContext(ctx, sql, issuanceWeekID, userDeviceID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if device_week_rewards exists")
	}

	return exists, nil
}
