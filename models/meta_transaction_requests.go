// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// MetaTransactionRequest is an object representing the database table.
type MetaTransactionRequest struct {
	ID         string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Hash       null.String `boil:"hash" json:"hash,omitempty" toml:"hash" yaml:"hash,omitempty"`
	Status     string      `boil:"status" json:"status" toml:"status" yaml:"status"`
	Successful null.Bool   `boil:"successful" json:"successful,omitempty" toml:"successful" yaml:"successful,omitempty"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *metaTransactionRequestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L metaTransactionRequestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MetaTransactionRequestColumns = struct {
	ID         string
	Hash       string
	Status     string
	Successful string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	Hash:       "hash",
	Status:     "status",
	Successful: "successful",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var MetaTransactionRequestTableColumns = struct {
	ID         string
	Hash       string
	Status     string
	Successful string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "meta_transaction_requests.id",
	Hash:       "meta_transaction_requests.hash",
	Status:     "meta_transaction_requests.status",
	Successful: "meta_transaction_requests.successful",
	CreatedAt:  "meta_transaction_requests.created_at",
	UpdatedAt:  "meta_transaction_requests.updated_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var MetaTransactionRequestWhere = struct {
	ID         whereHelperstring
	Hash       whereHelpernull_String
	Status     whereHelperstring
	Successful whereHelpernull_Bool
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	ID:         whereHelperstring{field: "\"rewards_api\".\"meta_transaction_requests\".\"id\""},
	Hash:       whereHelpernull_String{field: "\"rewards_api\".\"meta_transaction_requests\".\"hash\""},
	Status:     whereHelperstring{field: "\"rewards_api\".\"meta_transaction_requests\".\"status\""},
	Successful: whereHelpernull_Bool{field: "\"rewards_api\".\"meta_transaction_requests\".\"successful\""},
	CreatedAt:  whereHelpertime_Time{field: "\"rewards_api\".\"meta_transaction_requests\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"rewards_api\".\"meta_transaction_requests\".\"updated_at\""},
}

// MetaTransactionRequestRels is where relationship names are stored.
var MetaTransactionRequestRels = struct {
	RequestReferrals                      string
	TransferMetaTransactionRequestRewards string
}{
	RequestReferrals:                      "RequestReferrals",
	TransferMetaTransactionRequestRewards: "TransferMetaTransactionRequestRewards",
}

// metaTransactionRequestR is where relationships are stored.
type metaTransactionRequestR struct {
	RequestReferrals                      ReferralSlice `boil:"RequestReferrals" json:"RequestReferrals" toml:"RequestReferrals" yaml:"RequestReferrals"`
	TransferMetaTransactionRequestRewards RewardSlice   `boil:"TransferMetaTransactionRequestRewards" json:"TransferMetaTransactionRequestRewards" toml:"TransferMetaTransactionRequestRewards" yaml:"TransferMetaTransactionRequestRewards"`
}

// NewStruct creates a new relationship struct
func (*metaTransactionRequestR) NewStruct() *metaTransactionRequestR {
	return &metaTransactionRequestR{}
}

func (o *MetaTransactionRequest) GetRequestReferrals() ReferralSlice {
	if o == nil {
		return nil
	}

	return o.R.GetRequestReferrals()
}

func (r *metaTransactionRequestR) GetRequestReferrals() ReferralSlice {
	if r == nil {
		return nil
	}

	return r.RequestReferrals
}

func (o *MetaTransactionRequest) GetTransferMetaTransactionRequestRewards() RewardSlice {
	if o == nil {
		return nil
	}

	return o.R.GetTransferMetaTransactionRequestRewards()
}

func (r *metaTransactionRequestR) GetTransferMetaTransactionRequestRewards() RewardSlice {
	if r == nil {
		return nil
	}

	return r.TransferMetaTransactionRequestRewards
}

// metaTransactionRequestL is where Load methods for each relationship are stored.
type metaTransactionRequestL struct{}

var (
	metaTransactionRequestAllColumns            = []string{"id", "hash", "status", "successful", "created_at", "updated_at"}
	metaTransactionRequestColumnsWithoutDefault = []string{"id", "status"}
	metaTransactionRequestColumnsWithDefault    = []string{"hash", "successful", "created_at", "updated_at"}
	metaTransactionRequestPrimaryKeyColumns     = []string{"id"}
	metaTransactionRequestGeneratedColumns      = []string{}
)

type (
	// MetaTransactionRequestSlice is an alias for a slice of pointers to MetaTransactionRequest.
	// This should almost always be used instead of []MetaTransactionRequest.
	MetaTransactionRequestSlice []*MetaTransactionRequest
	// MetaTransactionRequestHook is the signature for custom MetaTransactionRequest hook methods
	MetaTransactionRequestHook func(context.Context, boil.ContextExecutor, *MetaTransactionRequest) error

	metaTransactionRequestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	metaTransactionRequestType                 = reflect.TypeOf(&MetaTransactionRequest{})
	metaTransactionRequestMapping              = queries.MakeStructMapping(metaTransactionRequestType)
	metaTransactionRequestPrimaryKeyMapping, _ = queries.BindMapping(metaTransactionRequestType, metaTransactionRequestMapping, metaTransactionRequestPrimaryKeyColumns)
	metaTransactionRequestInsertCacheMut       sync.RWMutex
	metaTransactionRequestInsertCache          = make(map[string]insertCache)
	metaTransactionRequestUpdateCacheMut       sync.RWMutex
	metaTransactionRequestUpdateCache          = make(map[string]updateCache)
	metaTransactionRequestUpsertCacheMut       sync.RWMutex
	metaTransactionRequestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var metaTransactionRequestAfterSelectMu sync.Mutex
var metaTransactionRequestAfterSelectHooks []MetaTransactionRequestHook

var metaTransactionRequestBeforeInsertMu sync.Mutex
var metaTransactionRequestBeforeInsertHooks []MetaTransactionRequestHook
var metaTransactionRequestAfterInsertMu sync.Mutex
var metaTransactionRequestAfterInsertHooks []MetaTransactionRequestHook

var metaTransactionRequestBeforeUpdateMu sync.Mutex
var metaTransactionRequestBeforeUpdateHooks []MetaTransactionRequestHook
var metaTransactionRequestAfterUpdateMu sync.Mutex
var metaTransactionRequestAfterUpdateHooks []MetaTransactionRequestHook

var metaTransactionRequestBeforeDeleteMu sync.Mutex
var metaTransactionRequestBeforeDeleteHooks []MetaTransactionRequestHook
var metaTransactionRequestAfterDeleteMu sync.Mutex
var metaTransactionRequestAfterDeleteHooks []MetaTransactionRequestHook

var metaTransactionRequestBeforeUpsertMu sync.Mutex
var metaTransactionRequestBeforeUpsertHooks []MetaTransactionRequestHook
var metaTransactionRequestAfterUpsertMu sync.Mutex
var metaTransactionRequestAfterUpsertHooks []MetaTransactionRequestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MetaTransactionRequest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MetaTransactionRequest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MetaTransactionRequest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MetaTransactionRequest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MetaTransactionRequest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MetaTransactionRequest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MetaTransactionRequest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MetaTransactionRequest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MetaTransactionRequest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMetaTransactionRequestHook registers your hook function for all future operations.
func AddMetaTransactionRequestHook(hookPoint boil.HookPoint, metaTransactionRequestHook MetaTransactionRequestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		metaTransactionRequestAfterSelectMu.Lock()
		metaTransactionRequestAfterSelectHooks = append(metaTransactionRequestAfterSelectHooks, metaTransactionRequestHook)
		metaTransactionRequestAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		metaTransactionRequestBeforeInsertMu.Lock()
		metaTransactionRequestBeforeInsertHooks = append(metaTransactionRequestBeforeInsertHooks, metaTransactionRequestHook)
		metaTransactionRequestBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		metaTransactionRequestAfterInsertMu.Lock()
		metaTransactionRequestAfterInsertHooks = append(metaTransactionRequestAfterInsertHooks, metaTransactionRequestHook)
		metaTransactionRequestAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		metaTransactionRequestBeforeUpdateMu.Lock()
		metaTransactionRequestBeforeUpdateHooks = append(metaTransactionRequestBeforeUpdateHooks, metaTransactionRequestHook)
		metaTransactionRequestBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		metaTransactionRequestAfterUpdateMu.Lock()
		metaTransactionRequestAfterUpdateHooks = append(metaTransactionRequestAfterUpdateHooks, metaTransactionRequestHook)
		metaTransactionRequestAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		metaTransactionRequestBeforeDeleteMu.Lock()
		metaTransactionRequestBeforeDeleteHooks = append(metaTransactionRequestBeforeDeleteHooks, metaTransactionRequestHook)
		metaTransactionRequestBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		metaTransactionRequestAfterDeleteMu.Lock()
		metaTransactionRequestAfterDeleteHooks = append(metaTransactionRequestAfterDeleteHooks, metaTransactionRequestHook)
		metaTransactionRequestAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		metaTransactionRequestBeforeUpsertMu.Lock()
		metaTransactionRequestBeforeUpsertHooks = append(metaTransactionRequestBeforeUpsertHooks, metaTransactionRequestHook)
		metaTransactionRequestBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		metaTransactionRequestAfterUpsertMu.Lock()
		metaTransactionRequestAfterUpsertHooks = append(metaTransactionRequestAfterUpsertHooks, metaTransactionRequestHook)
		metaTransactionRequestAfterUpsertMu.Unlock()
	}
}

// One returns a single metaTransactionRequest record from the query.
func (q metaTransactionRequestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MetaTransactionRequest, error) {
	o := &MetaTransactionRequest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for meta_transaction_requests")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MetaTransactionRequest records from the query.
func (q metaTransactionRequestQuery) All(ctx context.Context, exec boil.ContextExecutor) (MetaTransactionRequestSlice, error) {
	var o []*MetaTransactionRequest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MetaTransactionRequest slice")
	}

	if len(metaTransactionRequestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MetaTransactionRequest records in the query.
func (q metaTransactionRequestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count meta_transaction_requests rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q metaTransactionRequestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if meta_transaction_requests exists")
	}

	return count > 0, nil
}

// RequestReferrals retrieves all the referral's Referrals with an executor via request_id column.
func (o *MetaTransactionRequest) RequestReferrals(mods ...qm.QueryMod) referralQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"rewards_api\".\"referrals\".\"request_id\"=?", o.ID),
	)

	return Referrals(queryMods...)
}

// TransferMetaTransactionRequestRewards retrieves all the reward's Rewards with an executor via transfer_meta_transaction_request_id column.
func (o *MetaTransactionRequest) TransferMetaTransactionRequestRewards(mods ...qm.QueryMod) rewardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"rewards_api\".\"rewards\".\"transfer_meta_transaction_request_id\"=?", o.ID),
	)

	return Rewards(queryMods...)
}

// LoadRequestReferrals allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (metaTransactionRequestL) LoadRequestReferrals(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMetaTransactionRequest interface{}, mods queries.Applicator) error {
	var slice []*MetaTransactionRequest
	var object *MetaTransactionRequest

	if singular {
		var ok bool
		object, ok = maybeMetaTransactionRequest.(*MetaTransactionRequest)
		if !ok {
			object = new(MetaTransactionRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMetaTransactionRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMetaTransactionRequest))
			}
		}
	} else {
		s, ok := maybeMetaTransactionRequest.(*[]*MetaTransactionRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMetaTransactionRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMetaTransactionRequest))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &metaTransactionRequestR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &metaTransactionRequestR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`rewards_api.referrals`),
		qm.WhereIn(`rewards_api.referrals.request_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load referrals")
	}

	var resultSlice []*Referral
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice referrals")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on referrals")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for referrals")
	}

	if len(referralAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RequestReferrals = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &referralR{}
			}
			foreign.R.Request = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RequestID {
				local.R.RequestReferrals = append(local.R.RequestReferrals, foreign)
				if foreign.R == nil {
					foreign.R = &referralR{}
				}
				foreign.R.Request = local
				break
			}
		}
	}

	return nil
}

// LoadTransferMetaTransactionRequestRewards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (metaTransactionRequestL) LoadTransferMetaTransactionRequestRewards(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMetaTransactionRequest interface{}, mods queries.Applicator) error {
	var slice []*MetaTransactionRequest
	var object *MetaTransactionRequest

	if singular {
		var ok bool
		object, ok = maybeMetaTransactionRequest.(*MetaTransactionRequest)
		if !ok {
			object = new(MetaTransactionRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMetaTransactionRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMetaTransactionRequest))
			}
		}
	} else {
		s, ok := maybeMetaTransactionRequest.(*[]*MetaTransactionRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMetaTransactionRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMetaTransactionRequest))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &metaTransactionRequestR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &metaTransactionRequestR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`rewards_api.rewards`),
		qm.WhereIn(`rewards_api.rewards.transfer_meta_transaction_request_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load rewards")
	}

	var resultSlice []*Reward
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice rewards")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on rewards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rewards")
	}

	if len(rewardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TransferMetaTransactionRequestRewards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &rewardR{}
			}
			foreign.R.TransferMetaTransactionRequest = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TransferMetaTransactionRequestID) {
				local.R.TransferMetaTransactionRequestRewards = append(local.R.TransferMetaTransactionRequestRewards, foreign)
				if foreign.R == nil {
					foreign.R = &rewardR{}
				}
				foreign.R.TransferMetaTransactionRequest = local
				break
			}
		}
	}

	return nil
}

// AddRequestReferrals adds the given related objects to the existing relationships
// of the meta_transaction_request, optionally inserting them as new records.
// Appends related to o.R.RequestReferrals.
// Sets related.R.Request appropriately.
func (o *MetaTransactionRequest) AddRequestReferrals(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Referral) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RequestID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"rewards_api\".\"referrals\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"request_id"}),
				strmangle.WhereClause("\"", "\"", 2, referralPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Referee, rel.Referrer}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RequestID = o.ID
		}
	}

	if o.R == nil {
		o.R = &metaTransactionRequestR{
			RequestReferrals: related,
		}
	} else {
		o.R.RequestReferrals = append(o.R.RequestReferrals, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &referralR{
				Request: o,
			}
		} else {
			rel.R.Request = o
		}
	}
	return nil
}

// AddTransferMetaTransactionRequestRewards adds the given related objects to the existing relationships
// of the meta_transaction_request, optionally inserting them as new records.
// Appends related to o.R.TransferMetaTransactionRequestRewards.
// Sets related.R.TransferMetaTransactionRequest appropriately.
func (o *MetaTransactionRequest) AddTransferMetaTransactionRequestRewards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reward) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TransferMetaTransactionRequestID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"rewards_api\".\"rewards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"transfer_meta_transaction_request_id"}),
				strmangle.WhereClause("\"", "\"", 2, rewardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.IssuanceWeekID, rel.UserDeviceID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TransferMetaTransactionRequestID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &metaTransactionRequestR{
			TransferMetaTransactionRequestRewards: related,
		}
	} else {
		o.R.TransferMetaTransactionRequestRewards = append(o.R.TransferMetaTransactionRequestRewards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &rewardR{
				TransferMetaTransactionRequest: o,
			}
		} else {
			rel.R.TransferMetaTransactionRequest = o
		}
	}
	return nil
}

// SetTransferMetaTransactionRequestRewards removes all previously related items of the
// meta_transaction_request replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TransferMetaTransactionRequest's TransferMetaTransactionRequestRewards accordingly.
// Replaces o.R.TransferMetaTransactionRequestRewards with related.
// Sets related.R.TransferMetaTransactionRequest's TransferMetaTransactionRequestRewards accordingly.
func (o *MetaTransactionRequest) SetTransferMetaTransactionRequestRewards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reward) error {
	query := "update \"rewards_api\".\"rewards\" set \"transfer_meta_transaction_request_id\" = null where \"transfer_meta_transaction_request_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TransferMetaTransactionRequestRewards {
			queries.SetScanner(&rel.TransferMetaTransactionRequestID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TransferMetaTransactionRequest = nil
		}
		o.R.TransferMetaTransactionRequestRewards = nil
	}

	return o.AddTransferMetaTransactionRequestRewards(ctx, exec, insert, related...)
}

// RemoveTransferMetaTransactionRequestRewards relationships from objects passed in.
// Removes related items from R.TransferMetaTransactionRequestRewards (uses pointer comparison, removal does not keep order)
// Sets related.R.TransferMetaTransactionRequest.
func (o *MetaTransactionRequest) RemoveTransferMetaTransactionRequestRewards(ctx context.Context, exec boil.ContextExecutor, related ...*Reward) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TransferMetaTransactionRequestID, nil)
		if rel.R != nil {
			rel.R.TransferMetaTransactionRequest = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("transfer_meta_transaction_request_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TransferMetaTransactionRequestRewards {
			if rel != ri {
				continue
			}

			ln := len(o.R.TransferMetaTransactionRequestRewards)
			if ln > 1 && i < ln-1 {
				o.R.TransferMetaTransactionRequestRewards[i] = o.R.TransferMetaTransactionRequestRewards[ln-1]
			}
			o.R.TransferMetaTransactionRequestRewards = o.R.TransferMetaTransactionRequestRewards[:ln-1]
			break
		}
	}

	return nil
}

// MetaTransactionRequests retrieves all the records using an executor.
func MetaTransactionRequests(mods ...qm.QueryMod) metaTransactionRequestQuery {
	mods = append(mods, qm.From("\"rewards_api\".\"meta_transaction_requests\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"rewards_api\".\"meta_transaction_requests\".*"})
	}

	return metaTransactionRequestQuery{q}
}

// FindMetaTransactionRequest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMetaTransactionRequest(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*MetaTransactionRequest, error) {
	metaTransactionRequestObj := &MetaTransactionRequest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rewards_api\".\"meta_transaction_requests\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, metaTransactionRequestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from meta_transaction_requests")
	}

	if err = metaTransactionRequestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return metaTransactionRequestObj, err
	}

	return metaTransactionRequestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MetaTransactionRequest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no meta_transaction_requests provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(metaTransactionRequestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	metaTransactionRequestInsertCacheMut.RLock()
	cache, cached := metaTransactionRequestInsertCache[key]
	metaTransactionRequestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			metaTransactionRequestAllColumns,
			metaTransactionRequestColumnsWithDefault,
			metaTransactionRequestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(metaTransactionRequestType, metaTransactionRequestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(metaTransactionRequestType, metaTransactionRequestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rewards_api\".\"meta_transaction_requests\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rewards_api\".\"meta_transaction_requests\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into meta_transaction_requests")
	}

	if !cached {
		metaTransactionRequestInsertCacheMut.Lock()
		metaTransactionRequestInsertCache[key] = cache
		metaTransactionRequestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MetaTransactionRequest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MetaTransactionRequest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	metaTransactionRequestUpdateCacheMut.RLock()
	cache, cached := metaTransactionRequestUpdateCache[key]
	metaTransactionRequestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			metaTransactionRequestAllColumns,
			metaTransactionRequestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update meta_transaction_requests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rewards_api\".\"meta_transaction_requests\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, metaTransactionRequestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(metaTransactionRequestType, metaTransactionRequestMapping, append(wl, metaTransactionRequestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update meta_transaction_requests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for meta_transaction_requests")
	}

	if !cached {
		metaTransactionRequestUpdateCacheMut.Lock()
		metaTransactionRequestUpdateCache[key] = cache
		metaTransactionRequestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q metaTransactionRequestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for meta_transaction_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for meta_transaction_requests")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MetaTransactionRequestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metaTransactionRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rewards_api\".\"meta_transaction_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, metaTransactionRequestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in metaTransactionRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all metaTransactionRequest")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MetaTransactionRequest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no meta_transaction_requests provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(metaTransactionRequestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	metaTransactionRequestUpsertCacheMut.RLock()
	cache, cached := metaTransactionRequestUpsertCache[key]
	metaTransactionRequestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			metaTransactionRequestAllColumns,
			metaTransactionRequestColumnsWithDefault,
			metaTransactionRequestColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			metaTransactionRequestAllColumns,
			metaTransactionRequestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert meta_transaction_requests, could not build update column list")
		}

		ret := strmangle.SetComplement(metaTransactionRequestAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(metaTransactionRequestPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert meta_transaction_requests, could not build conflict column list")
			}

			conflict = make([]string, len(metaTransactionRequestPrimaryKeyColumns))
			copy(conflict, metaTransactionRequestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"rewards_api\".\"meta_transaction_requests\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(metaTransactionRequestType, metaTransactionRequestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(metaTransactionRequestType, metaTransactionRequestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert meta_transaction_requests")
	}

	if !cached {
		metaTransactionRequestUpsertCacheMut.Lock()
		metaTransactionRequestUpsertCache[key] = cache
		metaTransactionRequestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MetaTransactionRequest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MetaTransactionRequest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MetaTransactionRequest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), metaTransactionRequestPrimaryKeyMapping)
	sql := "DELETE FROM \"rewards_api\".\"meta_transaction_requests\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from meta_transaction_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for meta_transaction_requests")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q metaTransactionRequestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no metaTransactionRequestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from meta_transaction_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for meta_transaction_requests")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MetaTransactionRequestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(metaTransactionRequestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metaTransactionRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rewards_api\".\"meta_transaction_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, metaTransactionRequestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from metaTransactionRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for meta_transaction_requests")
	}

	if len(metaTransactionRequestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MetaTransactionRequest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMetaTransactionRequest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MetaTransactionRequestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MetaTransactionRequestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metaTransactionRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rewards_api\".\"meta_transaction_requests\".* FROM \"rewards_api\".\"meta_transaction_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, metaTransactionRequestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MetaTransactionRequestSlice")
	}

	*o = slice

	return nil
}

// MetaTransactionRequestExists checks if the MetaTransactionRequest row exists.
func MetaTransactionRequestExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rewards_api\".\"meta_transaction_requests\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if meta_transaction_requests exists")
	}

	return exists, nil
}

// Exists checks if the MetaTransactionRequest row exists.
func (o *MetaTransactionRequest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MetaTransactionRequestExists(ctx, exec, o.ID)
}
