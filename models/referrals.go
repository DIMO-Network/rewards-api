// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Referral is an object representing the database table.
type Referral struct {
	ID                    null.String `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	JobStatus             string      `boil:"job_status" json:"job_status" toml:"job_status" yaml:"job_status"`
	Referred              []byte      `boil:"referred" json:"referred" toml:"referred" yaml:"referred"`
	Referrer              []byte      `boil:"referrer" json:"referrer" toml:"referrer" yaml:"referrer"`
	TransferSuccessful    null.Bool   `boil:"transfer_successful" json:"transfer_successful,omitempty" toml:"transfer_successful" yaml:"transfer_successful,omitempty"`
	TransferFailureReason null.String `boil:"transfer_failure_reason" json:"transfer_failure_reason,omitempty" toml:"transfer_failure_reason" yaml:"transfer_failure_reason,omitempty"`

	R *referralR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L referralL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReferralColumns = struct {
	ID                    string
	JobStatus             string
	Referred              string
	Referrer              string
	TransferSuccessful    string
	TransferFailureReason string
}{
	ID:                    "id",
	JobStatus:             "job_status",
	Referred:              "referred",
	Referrer:              "referrer",
	TransferSuccessful:    "transfer_successful",
	TransferFailureReason: "transfer_failure_reason",
}

var ReferralTableColumns = struct {
	ID                    string
	JobStatus             string
	Referred              string
	Referrer              string
	TransferSuccessful    string
	TransferFailureReason string
}{
	ID:                    "referrals.id",
	JobStatus:             "referrals.job_status",
	Referred:              "referrals.referred",
	Referrer:              "referrals.referrer",
	TransferSuccessful:    "referrals.transfer_successful",
	TransferFailureReason: "referrals.transfer_failure_reason",
}

// Generated where

var ReferralWhere = struct {
	ID                    whereHelpernull_String
	JobStatus             whereHelperstring
	Referred              whereHelper__byte
	Referrer              whereHelper__byte
	TransferSuccessful    whereHelpernull_Bool
	TransferFailureReason whereHelpernull_String
}{
	ID:                    whereHelpernull_String{field: "\"rewards_api\".\"referrals\".\"id\""},
	JobStatus:             whereHelperstring{field: "\"rewards_api\".\"referrals\".\"job_status\""},
	Referred:              whereHelper__byte{field: "\"rewards_api\".\"referrals\".\"referred\""},
	Referrer:              whereHelper__byte{field: "\"rewards_api\".\"referrals\".\"referrer\""},
	TransferSuccessful:    whereHelpernull_Bool{field: "\"rewards_api\".\"referrals\".\"transfer_successful\""},
	TransferFailureReason: whereHelpernull_String{field: "\"rewards_api\".\"referrals\".\"transfer_failure_reason\""},
}

// ReferralRels is where relationship names are stored.
var ReferralRels = struct {
}{}

// referralR is where relationships are stored.
type referralR struct {
}

// NewStruct creates a new relationship struct
func (*referralR) NewStruct() *referralR {
	return &referralR{}
}

// referralL is where Load methods for each relationship are stored.
type referralL struct{}

var (
	referralAllColumns            = []string{"id", "job_status", "referred", "referrer", "transfer_successful", "transfer_failure_reason"}
	referralColumnsWithoutDefault = []string{"job_status", "referred", "referrer"}
	referralColumnsWithDefault    = []string{"id", "transfer_successful", "transfer_failure_reason"}
	referralPrimaryKeyColumns     = []string{"referred", "referrer"}
	referralGeneratedColumns      = []string{}
)

type (
	// ReferralSlice is an alias for a slice of pointers to Referral.
	// This should almost always be used instead of []Referral.
	ReferralSlice []*Referral
	// ReferralHook is the signature for custom Referral hook methods
	ReferralHook func(context.Context, boil.ContextExecutor, *Referral) error

	referralQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	referralType                 = reflect.TypeOf(&Referral{})
	referralMapping              = queries.MakeStructMapping(referralType)
	referralPrimaryKeyMapping, _ = queries.BindMapping(referralType, referralMapping, referralPrimaryKeyColumns)
	referralInsertCacheMut       sync.RWMutex
	referralInsertCache          = make(map[string]insertCache)
	referralUpdateCacheMut       sync.RWMutex
	referralUpdateCache          = make(map[string]updateCache)
	referralUpsertCacheMut       sync.RWMutex
	referralUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var referralAfterSelectHooks []ReferralHook

var referralBeforeInsertHooks []ReferralHook
var referralAfterInsertHooks []ReferralHook

var referralBeforeUpdateHooks []ReferralHook
var referralAfterUpdateHooks []ReferralHook

var referralBeforeDeleteHooks []ReferralHook
var referralAfterDeleteHooks []ReferralHook

var referralBeforeUpsertHooks []ReferralHook
var referralAfterUpsertHooks []ReferralHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Referral) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range referralAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Referral) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range referralBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Referral) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range referralAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Referral) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range referralBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Referral) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range referralAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Referral) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range referralBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Referral) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range referralAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Referral) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range referralBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Referral) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range referralAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReferralHook registers your hook function for all future operations.
func AddReferralHook(hookPoint boil.HookPoint, referralHook ReferralHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		referralAfterSelectHooks = append(referralAfterSelectHooks, referralHook)
	case boil.BeforeInsertHook:
		referralBeforeInsertHooks = append(referralBeforeInsertHooks, referralHook)
	case boil.AfterInsertHook:
		referralAfterInsertHooks = append(referralAfterInsertHooks, referralHook)
	case boil.BeforeUpdateHook:
		referralBeforeUpdateHooks = append(referralBeforeUpdateHooks, referralHook)
	case boil.AfterUpdateHook:
		referralAfterUpdateHooks = append(referralAfterUpdateHooks, referralHook)
	case boil.BeforeDeleteHook:
		referralBeforeDeleteHooks = append(referralBeforeDeleteHooks, referralHook)
	case boil.AfterDeleteHook:
		referralAfterDeleteHooks = append(referralAfterDeleteHooks, referralHook)
	case boil.BeforeUpsertHook:
		referralBeforeUpsertHooks = append(referralBeforeUpsertHooks, referralHook)
	case boil.AfterUpsertHook:
		referralAfterUpsertHooks = append(referralAfterUpsertHooks, referralHook)
	}
}

// One returns a single referral record from the query.
func (q referralQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Referral, error) {
	o := &Referral{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for referrals")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Referral records from the query.
func (q referralQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReferralSlice, error) {
	var o []*Referral

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Referral slice")
	}

	if len(referralAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Referral records in the query.
func (q referralQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count referrals rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q referralQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if referrals exists")
	}

	return count > 0, nil
}

// Referrals retrieves all the records using an executor.
func Referrals(mods ...qm.QueryMod) referralQuery {
	mods = append(mods, qm.From("\"rewards_api\".\"referrals\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"rewards_api\".\"referrals\".*"})
	}

	return referralQuery{q}
}

// FindReferral retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReferral(ctx context.Context, exec boil.ContextExecutor, referred []byte, referrer []byte, selectCols ...string) (*Referral, error) {
	referralObj := &Referral{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rewards_api\".\"referrals\" where \"referred\"=$1 AND \"referrer\"=$2", sel,
	)

	q := queries.Raw(query, referred, referrer)

	err := q.Bind(ctx, exec, referralObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from referrals")
	}

	if err = referralObj.doAfterSelectHooks(ctx, exec); err != nil {
		return referralObj, err
	}

	return referralObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Referral) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no referrals provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(referralColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	referralInsertCacheMut.RLock()
	cache, cached := referralInsertCache[key]
	referralInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			referralAllColumns,
			referralColumnsWithDefault,
			referralColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(referralType, referralMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(referralType, referralMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rewards_api\".\"referrals\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rewards_api\".\"referrals\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into referrals")
	}

	if !cached {
		referralInsertCacheMut.Lock()
		referralInsertCache[key] = cache
		referralInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Referral.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Referral) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	referralUpdateCacheMut.RLock()
	cache, cached := referralUpdateCache[key]
	referralUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			referralAllColumns,
			referralPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update referrals, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rewards_api\".\"referrals\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, referralPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(referralType, referralMapping, append(wl, referralPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update referrals row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for referrals")
	}

	if !cached {
		referralUpdateCacheMut.Lock()
		referralUpdateCache[key] = cache
		referralUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q referralQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for referrals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for referrals")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReferralSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), referralPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rewards_api\".\"referrals\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, referralPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in referral slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all referral")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Referral) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no referrals provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(referralColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	referralUpsertCacheMut.RLock()
	cache, cached := referralUpsertCache[key]
	referralUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			referralAllColumns,
			referralColumnsWithDefault,
			referralColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			referralAllColumns,
			referralPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert referrals, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(referralPrimaryKeyColumns))
			copy(conflict, referralPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"rewards_api\".\"referrals\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(referralType, referralMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(referralType, referralMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert referrals")
	}

	if !cached {
		referralUpsertCacheMut.Lock()
		referralUpsertCache[key] = cache
		referralUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Referral record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Referral) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Referral provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), referralPrimaryKeyMapping)
	sql := "DELETE FROM \"rewards_api\".\"referrals\" WHERE \"referred\"=$1 AND \"referrer\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from referrals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for referrals")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q referralQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no referralQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from referrals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for referrals")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReferralSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(referralBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), referralPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rewards_api\".\"referrals\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, referralPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from referral slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for referrals")
	}

	if len(referralAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Referral) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReferral(ctx, exec, o.Referred, o.Referrer)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReferralSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReferralSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), referralPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rewards_api\".\"referrals\".* FROM \"rewards_api\".\"referrals\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, referralPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReferralSlice")
	}

	*o = slice

	return nil
}

// ReferralExists checks if the Referral row exists.
func ReferralExists(ctx context.Context, exec boil.ContextExecutor, referred []byte, referrer []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rewards_api\".\"referrals\" where \"referred\"=$1 AND \"referrer\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, referred, referrer)
	}
	row := exec.QueryRowContext(ctx, sql, referred, referrer)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if referrals exists")
	}

	return exists, nil
}

// Exists checks if the Referral row exists.
func (o *Referral) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ReferralExists(ctx, exec, o.Referred, o.Referrer)
}
